// Generated by gencpp from file mviz_apa_show/CameraParam.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_CAMERAPARAM_H
#define MVIZ_APA_SHOW_MESSAGE_CAMERAPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/TransMatrix.h>
#include <mviz_apa_show/ProjectionModel.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct CameraParam_
{
  typedef CameraParam_<ContainerAllocator> Type;

  CameraParam_()
    : focal_u(0.0)
    , focal_v(0.0)
    , cu(0.0)
    , cv(0.0)
    , pos()
    , pitch(0.0)
    , yaw(0.0)
    , roll(0.0)
    , fov(0.0)
    , image_format(0)
    , isp_ver()
    , install_direction(0)
    , trans_mtx()
    , prj_model()
    , image_width(0)
    , image_height(0)
    , distort_coeffs()
    , camera_id(0)  {
    }
  CameraParam_(const ContainerAllocator& _alloc)
    : focal_u(0.0)
    , focal_v(0.0)
    , cu(0.0)
    , cv(0.0)
    , pos(_alloc)
    , pitch(0.0)
    , yaw(0.0)
    , roll(0.0)
    , fov(0.0)
    , image_format(0)
    , isp_ver(_alloc)
    , install_direction(0)
    , trans_mtx(_alloc)
    , prj_model(_alloc)
    , image_width(0)
    , image_height(0)
    , distort_coeffs(_alloc)
    , camera_id(0)  {
  (void)_alloc;
    }



   typedef float _focal_u_type;
  _focal_u_type focal_u;

   typedef float _focal_v_type;
  _focal_v_type focal_v;

   typedef float _cu_type;
  _cu_type cu;

   typedef float _cv_type;
  _cv_type cv;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pos_type;
  _pos_type pos;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _fov_type;
  _fov_type fov;

   typedef int32_t _image_format_type;
  _image_format_type image_format;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _isp_ver_type;
  _isp_ver_type isp_ver;

   typedef int32_t _install_direction_type;
  _install_direction_type install_direction;

   typedef  ::mviz_apa_show::TransMatrix_<ContainerAllocator>  _trans_mtx_type;
  _trans_mtx_type trans_mtx;

   typedef  ::mviz_apa_show::ProjectionModel_<ContainerAllocator>  _prj_model_type;
  _prj_model_type prj_model;

   typedef uint32_t _image_width_type;
  _image_width_type image_width;

   typedef uint32_t _image_height_type;
  _image_height_type image_height;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _distort_coeffs_type;
  _distort_coeffs_type distort_coeffs;

   typedef uint32_t _camera_id_type;
  _camera_id_type camera_id;





  typedef boost::shared_ptr< ::mviz_apa_show::CameraParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::CameraParam_<ContainerAllocator> const> ConstPtr;

}; // struct CameraParam_

typedef ::mviz_apa_show::CameraParam_<std::allocator<void> > CameraParam;

typedef boost::shared_ptr< ::mviz_apa_show::CameraParam > CameraParamPtr;
typedef boost::shared_ptr< ::mviz_apa_show::CameraParam const> CameraParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::CameraParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::CameraParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::CameraParam_<ContainerAllocator1> & lhs, const ::mviz_apa_show::CameraParam_<ContainerAllocator2> & rhs)
{
  return lhs.focal_u == rhs.focal_u &&
    lhs.focal_v == rhs.focal_v &&
    lhs.cu == rhs.cu &&
    lhs.cv == rhs.cv &&
    lhs.pos == rhs.pos &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.roll == rhs.roll &&
    lhs.fov == rhs.fov &&
    lhs.image_format == rhs.image_format &&
    lhs.isp_ver == rhs.isp_ver &&
    lhs.install_direction == rhs.install_direction &&
    lhs.trans_mtx == rhs.trans_mtx &&
    lhs.prj_model == rhs.prj_model &&
    lhs.image_width == rhs.image_width &&
    lhs.image_height == rhs.image_height &&
    lhs.distort_coeffs == rhs.distort_coeffs &&
    lhs.camera_id == rhs.camera_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::CameraParam_<ContainerAllocator1> & lhs, const ::mviz_apa_show::CameraParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::CameraParam_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::CameraParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::CameraParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa6850c05a1eeb9c2715e71cf991b865";
  }

  static const char* value(const ::mviz_apa_show::CameraParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa6850c05a1eeb9cULL;
  static const uint64_t static_value2 = 0x2715e71cf991b865ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/CameraParam";
  }

  static const char* value(const ::mviz_apa_show::CameraParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 focal_u                            # 归一化焦距\n"
"float32 focal_v                            # 归一化焦距\n"
"float32 cu                                 # 光心\n"
"float32 cv                                 # 光心\n"
"float32[] pos                       # 车身坐标系下坐标(vcs) (x, y, z)\n"
"float32 pitch                              # 俯仰角 (vcs) \n"
"float32 yaw                                # 偏航角 (vcs)\n"
"float32 roll                               # 横滚角 (vcs)\n"
"float32 fov                                # 视场角\n"
"int32 image_format                       # 图像格式 [ImageFormat]\n"
"string isp_ver                           # isp version \n"
"int32 install_direction                  # 安装方位 (CamDirect的组合) \n"
"TransMatrix trans_mtx                    # 变换矩阵\n"
"ProjectionModel prj_model                # 投影模型 \n"
"uint32 image_width                       # 像素宽度\n"
"uint32 image_height                      # 像素高度\n"
"float64[] distort_coeffs           # 畸变系数 (k1, k2, k3, p1, p2) \n"
"uint32 camera_id                         # camera idA\n"
"================================================================================\n"
"MSG: mviz_apa_show/TransMatrix\n"
"# 变换矩阵\n"
"float32[] vcsgnd2img     # 车身转图像 3x3\n"
"float32[] img2vcsgnd     # 图像转车身 3x3\n"
"float32[] local2img      # 局部世界坐标系转图像 3x3\n"
"float32[] img2local      # 图像转局部世界坐标系 3x3\n"
"================================================================================\n"
"MSG: mviz_apa_show/ProjectionModel\n"
"ProjectionModelEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/ProjectionModelEnum\n"
"int8 PRJ_MODEL_UNKNOWN = 0\n"
"int8 FISHEYE = 1\n"
"int8 MEI = 2\n"
"int8 PIN_HOLE = 3\n"
"int8 ATAN = 4\n"
"int8 DAVIDE_SCARAMUZZA = 5\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::CameraParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.focal_u);
      stream.next(m.focal_v);
      stream.next(m.cu);
      stream.next(m.cv);
      stream.next(m.pos);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.roll);
      stream.next(m.fov);
      stream.next(m.image_format);
      stream.next(m.isp_ver);
      stream.next(m.install_direction);
      stream.next(m.trans_mtx);
      stream.next(m.prj_model);
      stream.next(m.image_width);
      stream.next(m.image_height);
      stream.next(m.distort_coeffs);
      stream.next(m.camera_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::CameraParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::CameraParam_<ContainerAllocator>& v)
  {
    s << indent << "focal_u: ";
    Printer<float>::stream(s, indent + "  ", v.focal_u);
    s << indent << "focal_v: ";
    Printer<float>::stream(s, indent + "  ", v.focal_v);
    s << indent << "cu: ";
    Printer<float>::stream(s, indent + "  ", v.cu);
    s << indent << "cv: ";
    Printer<float>::stream(s, indent + "  ", v.cv);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "fov: ";
    Printer<float>::stream(s, indent + "  ", v.fov);
    s << indent << "image_format: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_format);
    s << indent << "isp_ver: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.isp_ver);
    s << indent << "install_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.install_direction);
    s << indent << "trans_mtx: ";
    s << std::endl;
    Printer< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >::stream(s, indent + "  ", v.trans_mtx);
    s << indent << "prj_model: ";
    s << std::endl;
    Printer< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >::stream(s, indent + "  ", v.prj_model);
    s << indent << "image_width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.image_height);
    s << indent << "distort_coeffs[]" << std::endl;
    for (size_t i = 0; i < v.distort_coeffs.size(); ++i)
    {
      s << indent << "  distort_coeffs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.distort_coeffs[i]);
    }
    s << indent << "camera_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.camera_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_CAMERAPARAM_H
