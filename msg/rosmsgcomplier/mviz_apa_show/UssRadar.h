// Generated by gencpp from file mviz_apa_show/UssRadar.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_USSRADAR_H
#define MVIZ_APA_SHOW_MESSAGE_USSRADAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct UssRadar_
{
  typedef UssRadar_<ContainerAllocator> Type;

  UssRadar_()
    : short_radar_fl(0.0)
    , short_radar_flm(0.0)
    , short_radar_frm(0.0)
    , short_radar_fr(0.0)
    , short_radar_bl(0.0)
    , short_radar_blm(0.0)
    , short_radar_brm(0.0)
    , short_radar_br(0.0)
    , long_radar_fl(0.0)
    , long_radar_fr(0.0)
    , long_radar_bl(0.0)
    , long_radar_br(0.0)
    , tick(0)  {
    }
  UssRadar_(const ContainerAllocator& _alloc)
    : short_radar_fl(0.0)
    , short_radar_flm(0.0)
    , short_radar_frm(0.0)
    , short_radar_fr(0.0)
    , short_radar_bl(0.0)
    , short_radar_blm(0.0)
    , short_radar_brm(0.0)
    , short_radar_br(0.0)
    , long_radar_fl(0.0)
    , long_radar_fr(0.0)
    , long_radar_bl(0.0)
    , long_radar_br(0.0)
    , tick(0)  {
  (void)_alloc;
    }



   typedef float _short_radar_fl_type;
  _short_radar_fl_type short_radar_fl;

   typedef float _short_radar_flm_type;
  _short_radar_flm_type short_radar_flm;

   typedef float _short_radar_frm_type;
  _short_radar_frm_type short_radar_frm;

   typedef float _short_radar_fr_type;
  _short_radar_fr_type short_radar_fr;

   typedef float _short_radar_bl_type;
  _short_radar_bl_type short_radar_bl;

   typedef float _short_radar_blm_type;
  _short_radar_blm_type short_radar_blm;

   typedef float _short_radar_brm_type;
  _short_radar_brm_type short_radar_brm;

   typedef float _short_radar_br_type;
  _short_radar_br_type short_radar_br;

   typedef float _long_radar_fl_type;
  _long_radar_fl_type long_radar_fl;

   typedef float _long_radar_fr_type;
  _long_radar_fr_type long_radar_fr;

   typedef float _long_radar_bl_type;
  _long_radar_bl_type long_radar_bl;

   typedef float _long_radar_br_type;
  _long_radar_br_type long_radar_br;

   typedef uint64_t _tick_type;
  _tick_type tick;





  typedef boost::shared_ptr< ::mviz_apa_show::UssRadar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::UssRadar_<ContainerAllocator> const> ConstPtr;

}; // struct UssRadar_

typedef ::mviz_apa_show::UssRadar_<std::allocator<void> > UssRadar;

typedef boost::shared_ptr< ::mviz_apa_show::UssRadar > UssRadarPtr;
typedef boost::shared_ptr< ::mviz_apa_show::UssRadar const> UssRadarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::UssRadar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::UssRadar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::UssRadar_<ContainerAllocator1> & lhs, const ::mviz_apa_show::UssRadar_<ContainerAllocator2> & rhs)
{
  return lhs.short_radar_fl == rhs.short_radar_fl &&
    lhs.short_radar_flm == rhs.short_radar_flm &&
    lhs.short_radar_frm == rhs.short_radar_frm &&
    lhs.short_radar_fr == rhs.short_radar_fr &&
    lhs.short_radar_bl == rhs.short_radar_bl &&
    lhs.short_radar_blm == rhs.short_radar_blm &&
    lhs.short_radar_brm == rhs.short_radar_brm &&
    lhs.short_radar_br == rhs.short_radar_br &&
    lhs.long_radar_fl == rhs.long_radar_fl &&
    lhs.long_radar_fr == rhs.long_radar_fr &&
    lhs.long_radar_bl == rhs.long_radar_bl &&
    lhs.long_radar_br == rhs.long_radar_br &&
    lhs.tick == rhs.tick;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::UssRadar_<ContainerAllocator1> & lhs, const ::mviz_apa_show::UssRadar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::UssRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::UssRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::UssRadar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ccf8f4912ad5940264404db53daaea3";
  }

  static const char* value(const ::mviz_apa_show::UssRadar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ccf8f4912ad5940ULL;
  static const uint64_t static_value2 = 0x264404db53daaea3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/UssRadar";
  }

  static const char* value(const ::mviz_apa_show::UssRadar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    float32 short_radar_fl   \n"
"    float32 short_radar_flm\n"
"    float32 short_radar_frm    \n"
"    float32 short_radar_fr    \n"
"    float32 short_radar_bl    \n"
"    float32 short_radar_blm   \n"
"    float32 short_radar_brm   \n"
"    float32 short_radar_br    \n"
"    float32 long_radar_fl    \n"
"    float32 long_radar_fr    \n"
"    float32 long_radar_bl    \n"
"    float32 long_radar_br         \n"
"    uint64 tick           \n"
;
  }

  static const char* value(const ::mviz_apa_show::UssRadar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.short_radar_fl);
      stream.next(m.short_radar_flm);
      stream.next(m.short_radar_frm);
      stream.next(m.short_radar_fr);
      stream.next(m.short_radar_bl);
      stream.next(m.short_radar_blm);
      stream.next(m.short_radar_brm);
      stream.next(m.short_radar_br);
      stream.next(m.long_radar_fl);
      stream.next(m.long_radar_fr);
      stream.next(m.long_radar_bl);
      stream.next(m.long_radar_br);
      stream.next(m.tick);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UssRadar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::UssRadar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::UssRadar_<ContainerAllocator>& v)
  {
    s << indent << "short_radar_fl: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_fl);
    s << indent << "short_radar_flm: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_flm);
    s << indent << "short_radar_frm: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_frm);
    s << indent << "short_radar_fr: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_fr);
    s << indent << "short_radar_bl: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_bl);
    s << indent << "short_radar_blm: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_blm);
    s << indent << "short_radar_brm: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_brm);
    s << indent << "short_radar_br: ";
    Printer<float>::stream(s, indent + "  ", v.short_radar_br);
    s << indent << "long_radar_fl: ";
    Printer<float>::stream(s, indent + "  ", v.long_radar_fl);
    s << indent << "long_radar_fr: ";
    Printer<float>::stream(s, indent + "  ", v.long_radar_fr);
    s << indent << "long_radar_bl: ";
    Printer<float>::stream(s, indent + "  ", v.long_radar_bl);
    s << indent << "long_radar_br: ";
    Printer<float>::stream(s, indent + "  ", v.long_radar_br);
    s << indent << "tick: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tick);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_USSRADAR_H
