// Generated by gencpp from file mviz_apa_show/FloatArray.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_FLOATARRAY_H
#define MVIZ_APA_SHOW_MESSAGE_FLOATARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct FloatArray_
{
  typedef FloatArray_<ContainerAllocator> Type;

  FloatArray_()
    : vals()
    , conf(0.0)  {
    }
  FloatArray_(const ContainerAllocator& _alloc)
    : vals(_alloc)
    , conf(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vals_type;
  _vals_type vals;

   typedef float _conf_type;
  _conf_type conf;





  typedef boost::shared_ptr< ::mviz_apa_show::FloatArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::FloatArray_<ContainerAllocator> const> ConstPtr;

}; // struct FloatArray_

typedef ::mviz_apa_show::FloatArray_<std::allocator<void> > FloatArray;

typedef boost::shared_ptr< ::mviz_apa_show::FloatArray > FloatArrayPtr;
typedef boost::shared_ptr< ::mviz_apa_show::FloatArray const> FloatArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::FloatArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::FloatArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::FloatArray_<ContainerAllocator1> & lhs, const ::mviz_apa_show::FloatArray_<ContainerAllocator2> & rhs)
{
  return lhs.vals == rhs.vals &&
    lhs.conf == rhs.conf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::FloatArray_<ContainerAllocator1> & lhs, const ::mviz_apa_show::FloatArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::FloatArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::FloatArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::FloatArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11421f714f2ab3c4c6439da152a5d764";
  }

  static const char* value(const ::mviz_apa_show::FloatArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11421f714f2ab3c4ULL;
  static const uint64_t static_value2 = 0xc6439da152a5d764ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/FloatArray";
  }

  static const char* value(const ::mviz_apa_show::FloatArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] vals\n"
"float32 conf\n"
;
  }

  static const char* value(const ::mviz_apa_show::FloatArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vals);
      stream.next(m.conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FloatArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::FloatArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::FloatArray_<ContainerAllocator>& v)
  {
    s << indent << "vals[]" << std::endl;
    for (size_t i = 0; i < v.vals.size(); ++i)
    {
      s << indent << "  vals[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vals[i]);
    }
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_FLOATARRAY_H
