// Generated by gencpp from file mviz_apa_show/CornerPt.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_CORNERPT_H
#define MVIZ_APA_SHOW_MESSAGE_CORNERPT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/Point2f.h>
#include <mviz_apa_show/Point2f.h>
#include <mviz_apa_show/Point2f.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct CornerPt_
{
  typedef CornerPt_<ContainerAllocator> Type;

  CornerPt_()
    : id(0)
    , image_pt()
    , vehicle_pt()
    , odom_pt()  {
    }
  CornerPt_(const ContainerAllocator& _alloc)
    : id(0)
    , image_pt(_alloc)
    , vehicle_pt(_alloc)
    , odom_pt(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _image_pt_type;
  _image_pt_type image_pt;

   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _vehicle_pt_type;
  _vehicle_pt_type vehicle_pt;

   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _odom_pt_type;
  _odom_pt_type odom_pt;





  typedef boost::shared_ptr< ::mviz_apa_show::CornerPt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::CornerPt_<ContainerAllocator> const> ConstPtr;

}; // struct CornerPt_

typedef ::mviz_apa_show::CornerPt_<std::allocator<void> > CornerPt;

typedef boost::shared_ptr< ::mviz_apa_show::CornerPt > CornerPtPtr;
typedef boost::shared_ptr< ::mviz_apa_show::CornerPt const> CornerPtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::CornerPt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::CornerPt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::CornerPt_<ContainerAllocator1> & lhs, const ::mviz_apa_show::CornerPt_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.image_pt == rhs.image_pt &&
    lhs.vehicle_pt == rhs.vehicle_pt &&
    lhs.odom_pt == rhs.odom_pt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::CornerPt_<ContainerAllocator1> & lhs, const ::mviz_apa_show::CornerPt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::CornerPt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::CornerPt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::CornerPt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc65f0caf2158a66aa4779112775ffd3";
  }

  static const char* value(const ::mviz_apa_show::CornerPt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc65f0caf2158a66ULL;
  static const uint64_t static_value2 = 0xaa4779112775ffd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/CornerPt";
  }

  static const char* value(const ::mviz_apa_show::CornerPt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id \n"
"Point2f image_pt   # 图像坐标 (pixel)\n"
"Point2f vehicle_pt   # 相对车身的物理坐标（m）(后处理模块debug用，右前上)\n"
"Point2f odom_pt   # odom坐标系下的物理坐标（m）\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::mviz_apa_show::CornerPt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.image_pt);
      stream.next(m.vehicle_pt);
      stream.next(m.odom_pt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CornerPt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::CornerPt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::CornerPt_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "image_pt: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.image_pt);
    s << indent << "vehicle_pt: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_pt);
    s << indent << "odom_pt: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.odom_pt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_CORNERPT_H
