// Generated by gencpp from file mviz_apa_show/ApMapResponse.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_APMAPRESPONSE_H
#define MVIZ_APA_SHOW_MESSAGE_APMAPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct ApMapResponse_
{
  typedef ApMapResponse_<ContainerAllocator> Type;

  ApMapResponse_()
    : ap_response(0)
    , localization_accuracy(0.0)
    , fail_reason(0)  {
    }
  ApMapResponse_(const ContainerAllocator& _alloc)
    : ap_response(0)
    , localization_accuracy(0.0)
    , fail_reason(0)  {
  (void)_alloc;
    }



   typedef uint32_t _ap_response_type;
  _ap_response_type ap_response;

   typedef float _localization_accuracy_type;
  _localization_accuracy_type localization_accuracy;

   typedef uint32_t _fail_reason_type;
  _fail_reason_type fail_reason;





  typedef boost::shared_ptr< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ApMapResponse_

typedef ::mviz_apa_show::ApMapResponse_<std::allocator<void> > ApMapResponse;

typedef boost::shared_ptr< ::mviz_apa_show::ApMapResponse > ApMapResponsePtr;
typedef boost::shared_ptr< ::mviz_apa_show::ApMapResponse const> ApMapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::ApMapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::ApMapResponse_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ApMapResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ap_response == rhs.ap_response &&
    lhs.localization_accuracy == rhs.localization_accuracy &&
    lhs.fail_reason == rhs.fail_reason;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::ApMapResponse_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ApMapResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddaf341960b25a06f40f174262bfb77e";
  }

  static const char* value(const ::mviz_apa_show::ApMapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddaf341960b25a06ULL;
  static const uint64_t static_value2 = 0xf40f174262bfb77eULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/ApMapResponse";
  }

  static const char* value(const ::mviz_apa_show::ApMapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 ap_response\n"
"float32 localization_accuracy\n"
"uint32 fail_reason\n"
;
  }

  static const char* value(const ::mviz_apa_show::ApMapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ap_response);
      stream.next(m.localization_accuracy);
      stream.next(m.fail_reason);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ApMapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::ApMapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::ApMapResponse_<ContainerAllocator>& v)
  {
    s << indent << "ap_response: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ap_response);
    s << indent << "localization_accuracy: ";
    Printer<float>::stream(s, indent + "  ", v.localization_accuracy);
    s << indent << "fail_reason: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fail_reason);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_APMAPRESPONSE_H
