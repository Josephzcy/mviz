// Generated by gencpp from file mviz_apa_show/LanelineList.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_LANELINELIST_H
#define MVIZ_APA_SHOW_MESSAGE_LANELINELIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/Laneline.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct LanelineList_
{
  typedef LanelineList_<ContainerAllocator> Type;

  LanelineList_()
    : line()  {
    }
  LanelineList_(const ContainerAllocator& _alloc)
    : line(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mviz_apa_show::Laneline_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mviz_apa_show::Laneline_<ContainerAllocator> >::other >  _line_type;
  _line_type line;





  typedef boost::shared_ptr< ::mviz_apa_show::LanelineList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::LanelineList_<ContainerAllocator> const> ConstPtr;

}; // struct LanelineList_

typedef ::mviz_apa_show::LanelineList_<std::allocator<void> > LanelineList;

typedef boost::shared_ptr< ::mviz_apa_show::LanelineList > LanelineListPtr;
typedef boost::shared_ptr< ::mviz_apa_show::LanelineList const> LanelineListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::LanelineList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::LanelineList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::LanelineList_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LanelineList_<ContainerAllocator2> & rhs)
{
  return lhs.line == rhs.line;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::LanelineList_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LanelineList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LanelineList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LanelineList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LanelineList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c388d6d836997bb990c17e4ab2c273cf";
  }

  static const char* value(const ::mviz_apa_show::LanelineList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc388d6d836997bb9ULL;
  static const uint64_t static_value2 = 0x90c17e4ab2c273cfULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/LanelineList";
  }

  static const char* value(const ::mviz_apa_show::LanelineList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Laneline[] line\n"
"================================================================================\n"
"MSG: mviz_apa_show/Laneline\n"
"LineType type                                                # 线型 类型:int 字节数:4 取值范围:(0~8)\n"
"LanelinePositionType pos_type                                # 位置 类型:int 字节数:4 取值范围:(0~8)\n"
"ColorType color_type                                         # 颜色 类型:int 字节数:4 取值范围:(0~4)\n"
"CurveCoeff curve_vehicle_coord                               # 车身坐标系下曲线方程 字节数:40\n"
"CurveCoeff curve_image_coord                                 # 图像坐标下曲线方程   字节数:40\n"
"\n"
"Point2fList points_image_coord             # 图像坐标系下的点集 (检测)  字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point3DList points_vehicle_coord           # 车身坐标系下的点集 (检测) 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"Point2fList fit_points_image_coord         # 图像坐标系下的点集 (拟合抽样) 字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point3DList fit_points_vehicle_coord       # 车身坐标系下的点集 (拟合抽样) 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"uint64 id                                                   # id 类型:uint64 字节数:8 取值范围(0~2^64)\n"
"LineState line_state                                        # 线状态 类型:int 字节数:4 取值范围:(0~2)\n"
"float32 confidence                                            # 置信度 类型:float 字节数:4 取值范围:(0~1)\n"
"float32 width                                                 # 车道线宽度(单位:m) 类型:float 字节数:4 取值范围:(0, 0.6)\n"
"uint32 age                                                  # 声明周期 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"uint32[] point_cam_id                                # 采样点对应的camera id  字节数: 16*n 取值范围 最大容量:255   \n"
"Point2f centroid_pt                       # 质心点坐标\n"
"int32 lane_id                                               # 车道线位置id(当前车道左侧从0向远处递减，右侧从1向远处递增)\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineType\n"
"LineTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineTypeEnum\n"
"int8 kLineSingleSolid = 0   # 实线\n"
"int8 kLineSingleDashed = 1  # 虚线\n"
"int8 kLineBold = 2          # 短粗虚线（道路出入口标线）\n"
"int8 kLineDoubleSolid = 3   # 双实线\n"
"int8 kLineDoubleDashed = 4  # 双虚线\n"
"int8 kLineSolidDashed = 5   # 实虚线\n"
"int8 kLineDashedSolid = 6   # 虚实线\n"
"int8 kFence = 7             # 栅栏\n"
"int8 kCurb=8                # 路沿\n"
"int8 kLineFishboneSolid = 9  # 减速线-实线\n"
"int8 kLineFishboneDashed = 10  # 减速线-虚线\n"
"int8 kLineChangeable = 11      # 可变车道线\n"
"int8 kLineUnknown = 12\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/LanelinePositionType\n"
"LanelinePositionTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LanelinePositionTypeEnum\n"
"int8 kAdjacentLeft = 0       # lane marking on the left side next to ego lane \n"
"int8 kEgoLeft = 1            # left lane marking of the ego lane \n"
"int8 kEgoRight = 2           # right lane marking of the ego lane \n"
"int8 kAdjacentRight = 3      # lane marking on the right side next to ego lane \n"
"int8 kThirdLeft = 4\n"
"int8 kThirdRight = 5 \n"
"int8 kFourthLeft = 6\n"
"int8 kFourthRight = 7 \n"
"int8 kOther = 8\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/ColorType\n"
"ColorTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/ColorTypeEnum\n"
"int8 kColorWhite = 0    # 白色\n"
"int8 kColorYellow = 1   # 黄色\n"
"int8 kColorOrange = 2   # 橙色\n"
"int8 kColorBlue = 3     # 蓝色\n"
"int8 kColorGreen = 4    # 绿色\n"
"int8 kColorGray = 5     # 灰色\n"
"int8 kColorWhiteYellow = 6  # 左白右黄\n"
"int8 kColorYellowWhite = 7  # 左黄右白\\\n"
"int8 kColorYellowGrayFusion = 8  # 黄灰混合\n"
"int8 kColorUnknown = 9  # \n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/CurveCoeff\n"
"# 曲线方程: y = c0 + c1*x + c2*x^2 + c3*x^3\n"
"float32 longitude_min  # view range start 类型:float 字节数:4 取值范围:(FLT_MIN~FLT_MAX)\n"
"float32 longitude_max  # view range end   类型:float 字节数:4 取值范围:(FLT_MIN~FLT_MAX)\n"
"float64 c0            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c1            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c2            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c3            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 dev_c0        # c0的标准差，即，车道线横向位置的标准差\n"
"float64 dev_c1		  # c1的标准差，即，车道线航向角的标准差\n"
"float64 dev_c2        # c2的标准差，即，车道线原点处曲率的标准差\n"
"float64 dev_c3       # c3的标准差，即，车道线原点处曲率变化率的标注差\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2fList\n"
"Point2f[] points\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point3DList\n"
"geometry_msgs/Point[] points \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineState\n"
"LineStateEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineStateEnum\n"
"int8 kDetected = 0      # 检测线\n"
"int8 kPredicted = 1     # 预测线\n"
"int8 kStableTrack = 2   # 稳定跟踪\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::LanelineList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.line);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LanelineList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::LanelineList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::LanelineList_<ContainerAllocator>& v)
  {
    s << indent << "line[]" << std::endl;
    for (size_t i = 0; i < v.line.size(); ++i)
    {
      s << indent << "  line[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mviz_apa_show::Laneline_<ContainerAllocator> >::stream(s, indent + "    ", v.line[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_LANELINELIST_H
