// Generated by gencpp from file mviz_apa_show/CamID.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_CAMID_H
#define MVIZ_APA_SHOW_MESSAGE_CAMID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct CamID_
{
  typedef CamID_<ContainerAllocator> Type;

  CamID_()
    : cam_direct(0)
    , fov(0)
    , id(0)  {
    }
  CamID_(const ContainerAllocator& _alloc)
    : cam_direct(0)
    , fov(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef int32_t _cam_direct_type;
  _cam_direct_type cam_direct;

   typedef int8_t _fov_type;
  _fov_type fov;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::mviz_apa_show::CamID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::CamID_<ContainerAllocator> const> ConstPtr;

}; // struct CamID_

typedef ::mviz_apa_show::CamID_<std::allocator<void> > CamID;

typedef boost::shared_ptr< ::mviz_apa_show::CamID > CamIDPtr;
typedef boost::shared_ptr< ::mviz_apa_show::CamID const> CamIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::CamID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::CamID_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::CamID_<ContainerAllocator1> & lhs, const ::mviz_apa_show::CamID_<ContainerAllocator2> & rhs)
{
  return lhs.cam_direct == rhs.cam_direct &&
    lhs.fov == rhs.fov &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::CamID_<ContainerAllocator1> & lhs, const ::mviz_apa_show::CamID_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::CamID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::CamID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::CamID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::CamID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::CamID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::CamID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::CamID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78139d7aea242b68390a1b87f8df9bed";
  }

  static const char* value(const ::mviz_apa_show::CamID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78139d7aea242b68ULL;
  static const uint64_t static_value2 = 0x390a1b87f8df9bedULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::CamID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/CamID";
  }

  static const char* value(const ::mviz_apa_show::CamID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::CamID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "	# /* 0x1 -> front, 0x2 -> rear, 0x4 -> left, 0x8 -> right\n"
"	#  * 0x1 | 0x4 -> left and front\n"
"	#  * 0x2 | 0x4 -> left and rear\n"
"	#  * 0x1 | 0x8 -> right and front\n"
"	#  * 0x2 | 0x8 -> right and rear\n"
"	#  */\n"
"	int32 cam_direct # 安装位置\n"
"	int8 fov        # fov描述 \n"
"	int32 id        # 扩展字段(可以直接用此字段表示camera个体)\n"
;
  }

  static const char* value(const ::mviz_apa_show::CamID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::CamID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cam_direct);
      stream.next(m.fov);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CamID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::CamID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::CamID_<ContainerAllocator>& v)
  {
    s << indent << "cam_direct: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cam_direct);
    s << indent << "fov: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fov);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_CAMID_H
