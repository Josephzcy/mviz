// Generated by gencpp from file mviz_apa_show/PlanningToHMI.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_PLANNINGTOHMI_H
#define MVIZ_APA_SHOW_MESSAGE_PLANNINGTOHMI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct PlanningToHMI_
{
  typedef PlanningToHMI_<ContainerAllocator> Type;

  PlanningToHMI_()
    : timestamp(0)
    , tick(0)
    , recommand_id()
    , slot_state()
    , current_stage(0.0)
    , remain_distance(0.0)
    , gear(0)  {
    }
  PlanningToHMI_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , tick(0)
    , recommand_id(_alloc)
    , slot_state(_alloc)
    , current_stage(0.0)
    , remain_distance(0.0)
    , gear(0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _tick_type;
  _tick_type tick;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _recommand_id_type;
  _recommand_id_type recommand_id;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _slot_state_type;
  _slot_state_type slot_state;

   typedef float _current_stage_type;
  _current_stage_type current_stage;

   typedef float _remain_distance_type;
  _remain_distance_type remain_distance;

   typedef int32_t _gear_type;
  _gear_type gear;





  typedef boost::shared_ptr< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningToHMI_

typedef ::mviz_apa_show::PlanningToHMI_<std::allocator<void> > PlanningToHMI;

typedef boost::shared_ptr< ::mviz_apa_show::PlanningToHMI > PlanningToHMIPtr;
typedef boost::shared_ptr< ::mviz_apa_show::PlanningToHMI const> PlanningToHMIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator1> & lhs, const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.tick == rhs.tick &&
    lhs.recommand_id == rhs.recommand_id &&
    lhs.slot_state == rhs.slot_state &&
    lhs.current_stage == rhs.current_stage &&
    lhs.remain_distance == rhs.remain_distance &&
    lhs.gear == rhs.gear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator1> & lhs, const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34f423a16dca3d0103445ab220985ac3";
  }

  static const char* value(const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34f423a16dca3d01ULL;
  static const uint64_t static_value2 = 0x03445ab220985ac3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/PlanningToHMI";
  }

  static const char* value(const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  uint64 timestamp  \n"
"  uint64 tick  \n"
"  int32[] recommand_id  \n"
"  int32[] slot_state\n"
"\n"
"  float32 current_stage  \n"
"  float32 remain_distance  \n"
"  int32 gear  \n"
;
  }

  static const char* value(const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.tick);
      stream.next(m.recommand_id);
      stream.next(m.slot_state);
      stream.next(m.current_stage);
      stream.next(m.remain_distance);
      stream.next(m.gear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningToHMI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::PlanningToHMI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::PlanningToHMI_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "tick: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tick);
    s << indent << "recommand_id[]" << std::endl;
    for (size_t i = 0; i < v.recommand_id.size(); ++i)
    {
      s << indent << "  recommand_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.recommand_id[i]);
    }
    s << indent << "slot_state[]" << std::endl;
    for (size_t i = 0; i < v.slot_state.size(); ++i)
    {
      s << indent << "  slot_state[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.slot_state[i]);
    }
    s << indent << "current_stage: ";
    Printer<float>::stream(s, indent + "  ", v.current_stage);
    s << indent << "remain_distance: ";
    Printer<float>::stream(s, indent + "  ", v.remain_distance);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_PLANNINGTOHMI_H
