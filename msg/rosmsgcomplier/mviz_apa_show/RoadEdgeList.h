// Generated by gencpp from file mviz_apa_show/RoadEdgeList.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_ROADEDGELIST_H
#define MVIZ_APA_SHOW_MESSAGE_ROADEDGELIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/RoadEdge.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct RoadEdgeList_
{
  typedef RoadEdgeList_<ContainerAllocator> Type;

  RoadEdgeList_()
    : road_edges()  {
    }
  RoadEdgeList_(const ContainerAllocator& _alloc)
    : road_edges(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mviz_apa_show::RoadEdge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mviz_apa_show::RoadEdge_<ContainerAllocator> >::other >  _road_edges_type;
  _road_edges_type road_edges;





  typedef boost::shared_ptr< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> const> ConstPtr;

}; // struct RoadEdgeList_

typedef ::mviz_apa_show::RoadEdgeList_<std::allocator<void> > RoadEdgeList;

typedef boost::shared_ptr< ::mviz_apa_show::RoadEdgeList > RoadEdgeListPtr;
typedef boost::shared_ptr< ::mviz_apa_show::RoadEdgeList const> RoadEdgeListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator1> & lhs, const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator2> & rhs)
{
  return lhs.road_edges == rhs.road_edges;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator1> & lhs, const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16b411070a3a1c6f6bf66f45167907e3";
  }

  static const char* value(const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16b411070a3a1c6fULL;
  static const uint64_t static_value2 = 0x6bf66f45167907e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/RoadEdgeList";
  }

  static const char* value(const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RoadEdge[] road_edges\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadEdge\n"
"uint32 id                                                    # id 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"uint32 age				                                      # 检测帧数 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"CurveCoeff curve_vehicle_coord                               # 车身坐标系下曲线方程 字节数:40\n"
"CurveCoeff curve_image_coord                                 # 图像坐标系下的曲线方程 字节数:40\n"
"Point3DList points_vehicle_coord           # 车身坐标系下的采样点 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"Point2fList points_image_coord             # 图像坐标系下的采样点 字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point2fList fit_points_image_coord         # 图像坐标系下的点集 (拟合抽样) 字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point3DList fit_points_vehicle_coord       # 车身坐标系下的点集 (拟合抽样) 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"LineState state                                              # 线状态 类型:int 字节数:4 取值范围:(0~2)\n"
"int32 side                                                  # 路沿在左侧还是右侧 类型:int32 字节数:4 取值范围(0~1)\n"
"float32 confidence                                            # 置信度 类型:float 字节数:4 取值范围:(0~1)\n"
"uint32[] camera_id                         # 摄像头id \n"
"================================================================================\n"
"MSG: mviz_apa_show/CurveCoeff\n"
"# 曲线方程: y = c0 + c1*x + c2*x^2 + c3*x^3\n"
"float32 longitude_min  # view range start 类型:float 字节数:4 取值范围:(FLT_MIN~FLT_MAX)\n"
"float32 longitude_max  # view range end   类型:float 字节数:4 取值范围:(FLT_MIN~FLT_MAX)\n"
"float64 c0            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c1            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c2            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c3            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 dev_c0        # c0的标准差，即，车道线横向位置的标准差\n"
"float64 dev_c1		  # c1的标准差，即，车道线航向角的标准差\n"
"float64 dev_c2        # c2的标准差，即，车道线原点处曲率的标准差\n"
"float64 dev_c3       # c3的标准差，即，车道线原点处曲率变化率的标注差\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point3DList\n"
"geometry_msgs/Point[] points \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2fList\n"
"Point2f[] points\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineState\n"
"LineStateEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineStateEnum\n"
"int8 kDetected = 0      # 检测线\n"
"int8 kPredicted = 1     # 预测线\n"
"int8 kStableTrack = 2   # 稳定跟踪\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.road_edges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadEdgeList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::RoadEdgeList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::RoadEdgeList_<ContainerAllocator>& v)
  {
    s << indent << "road_edges[]" << std::endl;
    for (size_t i = 0; i < v.road_edges.size(); ++i)
    {
      s << indent << "  road_edges[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mviz_apa_show::RoadEdge_<ContainerAllocator> >::stream(s, indent + "    ", v.road_edges[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_ROADEDGELIST_H
