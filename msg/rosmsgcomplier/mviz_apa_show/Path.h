// Generated by gencpp from file mviz_apa_show/Path.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_PATH_H
#define MVIZ_APA_SHOW_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : timestamp(0)
    , tick(0)
    , path_id(0)
    , move_direct(0)
    , turn_radius(0.0)
    , move_distance(0.0)  {
    }
  Path_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , tick(0)
    , path_id(0)
    , move_direct(0)
    , turn_radius(0.0)
    , move_distance(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _tick_type;
  _tick_type tick;

   typedef uint32_t _path_id_type;
  _path_id_type path_id;

   typedef uint32_t _move_direct_type;
  _move_direct_type move_direct;

   typedef float _turn_radius_type;
  _turn_radius_type turn_radius;

   typedef float _move_distance_type;
  _move_distance_type move_distance;





  typedef boost::shared_ptr< ::mviz_apa_show::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::mviz_apa_show::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::mviz_apa_show::Path > PathPtr;
typedef boost::shared_ptr< ::mviz_apa_show::Path const> PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::Path_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Path_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.tick == rhs.tick &&
    lhs.path_id == rhs.path_id &&
    lhs.move_direct == rhs.move_direct &&
    lhs.turn_radius == rhs.turn_radius &&
    lhs.move_distance == rhs.move_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::Path_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9a30b8c4ef96ee8d2ac02081bf63022";
  }

  static const char* value(const ::mviz_apa_show::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9a30b8c4ef96ee8ULL;
  static const uint64_t static_value2 = 0xd2ac02081bf63022ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/Path";
  }

  static const char* value(const ::mviz_apa_show::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp                 # 时戳, microseconds\n"
"uint64 tick\n"
"uint32 path_id                       # path id \n"
"uint32 move_direct # 0|inviad 1|backward 2|forward\n"
"float32 turn_radius\n"
"float32 move_distance\n"
;
  }

  static const char* value(const ::mviz_apa_show::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.tick);
      stream.next(m.path_id);
      stream.next(m.move_direct);
      stream.next(m.turn_radius);
      stream.next(m.move_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::Path_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "tick: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tick);
    s << indent << "path_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.path_id);
    s << indent << "move_direct: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.move_direct);
    s << indent << "turn_radius: ";
    Printer<float>::stream(s, indent + "  ", v.turn_radius);
    s << indent << "move_distance: ";
    Printer<float>::stream(s, indent + "  ", v.move_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_PATH_H
