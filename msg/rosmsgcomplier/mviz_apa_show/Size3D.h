// Generated by gencpp from file mviz_apa_show/Size3D.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_SIZE3D_H
#define MVIZ_APA_SHOW_MESSAGE_SIZE3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct Size3D_
{
  typedef Size3D_<ContainerAllocator> Type;

  Size3D_()
    : w(0.0)
    , h(0.0)
    , l(0.0)  {
    }
  Size3D_(const ContainerAllocator& _alloc)
    : w(0.0)
    , h(0.0)
    , l(0.0)  {
  (void)_alloc;
    }



   typedef double _w_type;
  _w_type w;

   typedef double _h_type;
  _h_type h;

   typedef double _l_type;
  _l_type l;





  typedef boost::shared_ptr< ::mviz_apa_show::Size3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::Size3D_<ContainerAllocator> const> ConstPtr;

}; // struct Size3D_

typedef ::mviz_apa_show::Size3D_<std::allocator<void> > Size3D;

typedef boost::shared_ptr< ::mviz_apa_show::Size3D > Size3DPtr;
typedef boost::shared_ptr< ::mviz_apa_show::Size3D const> Size3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::Size3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::Size3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::Size3D_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Size3D_<ContainerAllocator2> & rhs)
{
  return lhs.w == rhs.w &&
    lhs.h == rhs.h &&
    lhs.l == rhs.l;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::Size3D_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Size3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Size3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Size3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Size3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Size3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Size3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Size3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::Size3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4c52353dc823071e8078761ebb79d28";
  }

  static const char* value(const ::mviz_apa_show::Size3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4c52353dc823071ULL;
  static const uint64_t static_value2 = 0xe8078761ebb79d28ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::Size3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/Size3D";
  }

  static const char* value(const ::mviz_apa_show::Size3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::Size3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 w\n"
"float64 h\n"
"float64 l\n"
;
  }

  static const char* value(const ::mviz_apa_show::Size3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::Size3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w);
      stream.next(m.h);
      stream.next(m.l);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Size3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::Size3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::Size3D_<ContainerAllocator>& v)
  {
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
    s << indent << "l: ";
    Printer<double>::stream(s, indent + "  ", v.l);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_SIZE3D_H
