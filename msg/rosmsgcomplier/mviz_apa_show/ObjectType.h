// Generated by gencpp from file mviz_apa_show/ObjectType.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_OBJECTTYPE_H
#define MVIZ_APA_SHOW_MESSAGE_OBJECTTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/ObjectTypeEnum.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct ObjectType_
{
  typedef ObjectType_<ContainerAllocator> Type;

  ObjectType_()
    : type()  {
    }
  ObjectType_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator>  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::mviz_apa_show::ObjectType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::ObjectType_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectType_

typedef ::mviz_apa_show::ObjectType_<std::allocator<void> > ObjectType;

typedef boost::shared_ptr< ::mviz_apa_show::ObjectType > ObjectTypePtr;
typedef boost::shared_ptr< ::mviz_apa_show::ObjectType const> ObjectTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::ObjectType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::ObjectType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::ObjectType_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ObjectType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::ObjectType_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ObjectType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ObjectType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ObjectType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ObjectType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f14fa495d47d1e330d1b798c2cd74671";
  }

  static const char* value(const ::mviz_apa_show::ObjectType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf14fa495d47d1e33ULL;
  static const uint64_t static_value2 = 0x0d1b798c2cd74671ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/ObjectType";
  }

  static const char* value(const ::mviz_apa_show::ObjectType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ObjectTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/ObjectTypeEnum\n"
"# 目标检测分类\n"
"int8 kNone = 0\n"
"int8 kVehicle = 1                           # 车辆 \n"
"int8 kPed = 2                               # 行人\n"
"int8 kBike = 3                              # 二轮车\n"
"int8 kCone = 4                              # 锥桶\n"
" \n"
"int8 kVehicleWheel = 5                      # 车轮\n"
"int8 kVehiclePlate = 6                      # 车牌\n"
"int8 kPedHead = 7                           # 人头\n"
" \n"
"int8 kSmallTrafficSign = 10                 # 小标牌\n"
"int8 kBigTrafficSign = 11                   # 大标牌\n"
"int8 kTrafficLight = 12                     # 交通信号灯\n"
"int8 kAnimals = 13                          # 动物\n"
"int8 kVehicleLight = 14                     # 车灯\n"
"int8 kStreetLamp = 15                       # 路灯\n"
"int8 kObjectTypeNum = 16\n"
"\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::ObjectType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::ObjectType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::ObjectType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_OBJECTTYPE_H
