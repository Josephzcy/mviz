// Generated by gencpp from file mviz_apa_show/ObjectTypeEnum.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_OBJECTTYPEENUM_H
#define MVIZ_APA_SHOW_MESSAGE_OBJECTTYPEENUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct ObjectTypeEnum_
{
  typedef ObjectTypeEnum_<ContainerAllocator> Type;

  ObjectTypeEnum_()
    : value(0)  {
    }
  ObjectTypeEnum_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef int8_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(kNone)
  #undef kNone
#endif
#if defined(_WIN32) && defined(kVehicle)
  #undef kVehicle
#endif
#if defined(_WIN32) && defined(kPed)
  #undef kPed
#endif
#if defined(_WIN32) && defined(kBike)
  #undef kBike
#endif
#if defined(_WIN32) && defined(kCone)
  #undef kCone
#endif
#if defined(_WIN32) && defined(kVehicleWheel)
  #undef kVehicleWheel
#endif
#if defined(_WIN32) && defined(kVehiclePlate)
  #undef kVehiclePlate
#endif
#if defined(_WIN32) && defined(kPedHead)
  #undef kPedHead
#endif
#if defined(_WIN32) && defined(kSmallTrafficSign)
  #undef kSmallTrafficSign
#endif
#if defined(_WIN32) && defined(kBigTrafficSign)
  #undef kBigTrafficSign
#endif
#if defined(_WIN32) && defined(kTrafficLight)
  #undef kTrafficLight
#endif
#if defined(_WIN32) && defined(kAnimals)
  #undef kAnimals
#endif
#if defined(_WIN32) && defined(kVehicleLight)
  #undef kVehicleLight
#endif
#if defined(_WIN32) && defined(kStreetLamp)
  #undef kStreetLamp
#endif
#if defined(_WIN32) && defined(kObjectTypeNum)
  #undef kObjectTypeNum
#endif

  enum {
    kNone = 0,
    kVehicle = 1,
    kPed = 2,
    kBike = 3,
    kCone = 4,
    kVehicleWheel = 5,
    kVehiclePlate = 6,
    kPedHead = 7,
    kSmallTrafficSign = 10,
    kBigTrafficSign = 11,
    kTrafficLight = 12,
    kAnimals = 13,
    kVehicleLight = 14,
    kStreetLamp = 15,
    kObjectTypeNum = 16,
  };


  typedef boost::shared_ptr< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectTypeEnum_

typedef ::mviz_apa_show::ObjectTypeEnum_<std::allocator<void> > ObjectTypeEnum;

typedef boost::shared_ptr< ::mviz_apa_show::ObjectTypeEnum > ObjectTypeEnumPtr;
typedef boost::shared_ptr< ::mviz_apa_show::ObjectTypeEnum const> ObjectTypeEnumConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b634d34aaa37a83fad8fb8f089d4a49";
  }

  static const char* value(const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b634d34aaa37a83ULL;
  static const uint64_t static_value2 = 0xfad8fb8f089d4a49ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/ObjectTypeEnum";
  }

  static const char* value(const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 目标检测分类\n"
"int8 kNone = 0\n"
"int8 kVehicle = 1                           # 车辆 \n"
"int8 kPed = 2                               # 行人\n"
"int8 kBike = 3                              # 二轮车\n"
"int8 kCone = 4                              # 锥桶\n"
" \n"
"int8 kVehicleWheel = 5                      # 车轮\n"
"int8 kVehiclePlate = 6                      # 车牌\n"
"int8 kPedHead = 7                           # 人头\n"
" \n"
"int8 kSmallTrafficSign = 10                 # 小标牌\n"
"int8 kBigTrafficSign = 11                   # 大标牌\n"
"int8 kTrafficLight = 12                     # 交通信号灯\n"
"int8 kAnimals = 13                          # 动物\n"
"int8 kVehicleLight = 14                     # 车灯\n"
"int8 kStreetLamp = 15                       # 路灯\n"
"int8 kObjectTypeNum = 16\n"
"\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectTypeEnum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::ObjectTypeEnum_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_OBJECTTYPEENUM_H
