// Generated by gencpp from file mviz_apa_show/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_TRAJECTORYPOINT_H
#define MVIZ_APA_SHOW_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/PathPoint.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : path_point()
    , v(0.0)
    , a(0.0)
    , da(0.0)
    , rl_time(0.0)
    , steer(0.0)  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : path_point(_alloc)
    , v(0.0)
    , a(0.0)
    , da(0.0)
    , rl_time(0.0)
    , steer(0.0)  {
  (void)_alloc;
    }



   typedef  ::mviz_apa_show::PathPoint_<ContainerAllocator>  _path_point_type;
  _path_point_type path_point;

   typedef float _v_type;
  _v_type v;

   typedef float _a_type;
  _a_type a;

   typedef float _da_type;
  _da_type da;

   typedef float _rl_time_type;
  _rl_time_type rl_time;

   typedef float _steer_type;
  _steer_type steer;





  typedef boost::shared_ptr< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::mviz_apa_show::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::mviz_apa_show::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::mviz_apa_show::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.path_point == rhs.path_point &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a &&
    lhs.da == rhs.da &&
    lhs.rl_time == rhs.rl_time &&
    lhs.steer == rhs.steer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "708e6122eaa5094a43cabf7f3feb6c38";
  }

  static const char* value(const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x708e6122eaa5094aULL;
  static const uint64_t static_value2 = 0x43cabf7f3feb6c38ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/TrajectoryPoint";
  }

  static const char* value(const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PathPoint path_point\n"
"float32 v\n"
"float32 a\n"
"float32 da\n"
"float32 rl_time\n"
"float32 steer\n"
"================================================================================\n"
"MSG: mviz_apa_show/PathPoint\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 theta\n"
"float32 s\n"
"float32 kappa\n"
"float32 dkappa\n"
"float32 ddkappa\n"
"float32 x_derivative\n"
"float32 y_derivative\n"
;
  }

  static const char* value(const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_point);
      stream.next(m.v);
      stream.next(m.a);
      stream.next(m.da);
      stream.next(m.rl_time);
      stream.next(m.steer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "path_point: ";
    s << std::endl;
    Printer< ::mviz_apa_show::PathPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.path_point);
    s << indent << "v: ";
    Printer<float>::stream(s, indent + "  ", v.v);
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "da: ";
    Printer<float>::stream(s, indent + "  ", v.da);
    s << indent << "rl_time: ";
    Printer<float>::stream(s, indent + "  ", v.rl_time);
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_TRAJECTORYPOINT_H
