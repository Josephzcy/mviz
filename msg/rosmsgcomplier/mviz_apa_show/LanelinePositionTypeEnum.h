// Generated by gencpp from file mviz_apa_show/LanelinePositionTypeEnum.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_LANELINEPOSITIONTYPEENUM_H
#define MVIZ_APA_SHOW_MESSAGE_LANELINEPOSITIONTYPEENUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct LanelinePositionTypeEnum_
{
  typedef LanelinePositionTypeEnum_<ContainerAllocator> Type;

  LanelinePositionTypeEnum_()
    : value(0)  {
    }
  LanelinePositionTypeEnum_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef int8_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(kAdjacentLeft)
  #undef kAdjacentLeft
#endif
#if defined(_WIN32) && defined(kEgoLeft)
  #undef kEgoLeft
#endif
#if defined(_WIN32) && defined(kEgoRight)
  #undef kEgoRight
#endif
#if defined(_WIN32) && defined(kAdjacentRight)
  #undef kAdjacentRight
#endif
#if defined(_WIN32) && defined(kThirdLeft)
  #undef kThirdLeft
#endif
#if defined(_WIN32) && defined(kThirdRight)
  #undef kThirdRight
#endif
#if defined(_WIN32) && defined(kFourthLeft)
  #undef kFourthLeft
#endif
#if defined(_WIN32) && defined(kFourthRight)
  #undef kFourthRight
#endif
#if defined(_WIN32) && defined(kOther)
  #undef kOther
#endif

  enum {
    kAdjacentLeft = 0,
    kEgoLeft = 1,
    kEgoRight = 2,
    kAdjacentRight = 3,
    kThirdLeft = 4,
    kThirdRight = 5,
    kFourthLeft = 6,
    kFourthRight = 7,
    kOther = 8,
  };


  typedef boost::shared_ptr< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> const> ConstPtr;

}; // struct LanelinePositionTypeEnum_

typedef ::mviz_apa_show::LanelinePositionTypeEnum_<std::allocator<void> > LanelinePositionTypeEnum;

typedef boost::shared_ptr< ::mviz_apa_show::LanelinePositionTypeEnum > LanelinePositionTypeEnumPtr;
typedef boost::shared_ptr< ::mviz_apa_show::LanelinePositionTypeEnum const> LanelinePositionTypeEnumConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "193278d4b910b79385c1e61c7ea1eafb";
  }

  static const char* value(const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x193278d4b910b793ULL;
  static const uint64_t static_value2 = 0x85c1e61c7ea1eafbULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/LanelinePositionTypeEnum";
  }

  static const char* value(const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 kAdjacentLeft = 0       # lane marking on the left side next to ego lane \n"
"int8 kEgoLeft = 1            # left lane marking of the ego lane \n"
"int8 kEgoRight = 2           # right lane marking of the ego lane \n"
"int8 kAdjacentRight = 3      # lane marking on the right side next to ego lane \n"
"int8 kThirdLeft = 4\n"
"int8 kThirdRight = 5 \n"
"int8 kFourthLeft = 6\n"
"int8 kFourthRight = 7 \n"
"int8 kOther = 8\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LanelinePositionTypeEnum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::LanelinePositionTypeEnum_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_LANELINEPOSITIONTYPEENUM_H
