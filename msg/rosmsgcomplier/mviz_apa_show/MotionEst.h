// Generated by gencpp from file mviz_apa_show/MotionEst.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_MOTIONEST_H
#define MVIZ_APA_SHOW_MESSAGE_MOTIONEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct MotionEst_
{
  typedef MotionEst_<ContainerAllocator> Type;

  MotionEst_()
    : lateral_speed(0.0)
    , lateral_acc(0.0)
    , confidence(0.0)  {
    }
  MotionEst_(const ContainerAllocator& _alloc)
    : lateral_speed(0.0)
    , lateral_acc(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef float _lateral_speed_type;
  _lateral_speed_type lateral_speed;

   typedef float _lateral_acc_type;
  _lateral_acc_type lateral_acc;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::mviz_apa_show::MotionEst_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::MotionEst_<ContainerAllocator> const> ConstPtr;

}; // struct MotionEst_

typedef ::mviz_apa_show::MotionEst_<std::allocator<void> > MotionEst;

typedef boost::shared_ptr< ::mviz_apa_show::MotionEst > MotionEstPtr;
typedef boost::shared_ptr< ::mviz_apa_show::MotionEst const> MotionEstConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::MotionEst_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::MotionEst_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::MotionEst_<ContainerAllocator1> & lhs, const ::mviz_apa_show::MotionEst_<ContainerAllocator2> & rhs)
{
  return lhs.lateral_speed == rhs.lateral_speed &&
    lhs.lateral_acc == rhs.lateral_acc &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::MotionEst_<ContainerAllocator1> & lhs, const ::mviz_apa_show::MotionEst_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::MotionEst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::MotionEst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::MotionEst_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "626628f1fc3f99fc2ee611e864949892";
  }

  static const char* value(const ::mviz_apa_show::MotionEst_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x626628f1fc3f99fcULL;
  static const uint64_t static_value2 = 0x2ee611e864949892ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/MotionEst";
  }

  static const char* value(const ::mviz_apa_show::MotionEst_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 lateral_speed # 横向速度(单位: m/s) 类型:float32 字节数:4 取值范围:[-10 ~ 10]                    \n"
"float32 lateral_acc   # 横向加速度(单位: m/s^2) 类型:float32 字节数:4 取值范围:[-5g - 5g]\n"
"float32 confidence    # 置信度 类型:float　字节数:4 取值范围:[0 - 1] \n"
;
  }

  static const char* value(const ::mviz_apa_show::MotionEst_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lateral_speed);
      stream.next(m.lateral_acc);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionEst_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::MotionEst_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::MotionEst_<ContainerAllocator>& v)
  {
    s << indent << "lateral_speed: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_speed);
    s << indent << "lateral_acc: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_acc);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_MOTIONEST_H
