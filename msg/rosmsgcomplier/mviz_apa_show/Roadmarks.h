// Generated by gencpp from file mviz_apa_show/Roadmarks.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_ROADMARKS_H
#define MVIZ_APA_SHOW_MESSAGE_ROADMARKS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/Roadmark.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct Roadmarks_
{
  typedef Roadmarks_<ContainerAllocator> Type;

  Roadmarks_()
    : roadmarks()  {
    }
  Roadmarks_(const ContainerAllocator& _alloc)
    : roadmarks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mviz_apa_show::Roadmark_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mviz_apa_show::Roadmark_<ContainerAllocator> >::other >  _roadmarks_type;
  _roadmarks_type roadmarks;





  typedef boost::shared_ptr< ::mviz_apa_show::Roadmarks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::Roadmarks_<ContainerAllocator> const> ConstPtr;

}; // struct Roadmarks_

typedef ::mviz_apa_show::Roadmarks_<std::allocator<void> > Roadmarks;

typedef boost::shared_ptr< ::mviz_apa_show::Roadmarks > RoadmarksPtr;
typedef boost::shared_ptr< ::mviz_apa_show::Roadmarks const> RoadmarksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::Roadmarks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::Roadmarks_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Roadmarks_<ContainerAllocator2> & rhs)
{
  return lhs.roadmarks == rhs.roadmarks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::Roadmarks_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Roadmarks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Roadmarks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Roadmarks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Roadmarks_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb3da66fd0c458f5ff8e266afd141f6f";
  }

  static const char* value(const ::mviz_apa_show::Roadmarks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb3da66fd0c458f5ULL;
  static const uint64_t static_value2 = 0xff8e266afd141f6fULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/Roadmarks";
  }

  static const char* value(const ::mviz_apa_show::Roadmarks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Roadmark[] roadmarks\n"
"================================================================================\n"
"MSG: mviz_apa_show/Roadmark\n"
"uint32 id                                                    # id 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"RoadmarkType type                                                    # 类型 类型:int 字节数:4 取值范围:(0~17)\n"
"Point2fList corner_pt_image_coord     # 外接矩形角点图像坐标 字节数:64 取值范围(w>=x>=0, h>=y>=0) 容量:4\n"
"Point3DList corner_pt_vehicle_coord   # 外接矩形角点世界坐标 字节数:96 取值范围(100>=x>=0, 20>=y>=-20) 容量:4\n"
"geometry_msgs/Point centroid_vehicle_coord             # 质心世界坐标 字节数:24 取值范围(100>=x>=0, 20>=y>=-20)\n"
"float32 confidence                                            # 置信度 类型:float32 字节数:4 取值范围:(0~1)\n"
"uint32 lane_idx                                              # 路面标识所在的lane id 类型:uint32 字节数:4 取值范围:(0~7)\n"
"# Form form                                             \n"
"# State state\n"
"Point2f centroid_image_coord\n"
"float32 width                                                # 线型标识世界坐标下的宽度\n"
"uint32 camera_id                                            # 摄像头id\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadmarkType\n"
"RoadmarkTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadmarkTypeEnum\n"
"int8 kBackGround = 0              # 背景\n"
"int8 kStraightArrow = 1           # 直行\n"
"int8 kLeftArrow = 2               # 左转\n"
"int8 kRightArrow = 3              # 右转\n"
"int8 kUturnArrow = 4              # 掉头\n"
"int8 kDiamond = 5                 # 菱形 (前方有人行横道)\n"
"int8 kInvertedTriangle = 6        # 倒三角 (减速让行)\n"
"int8 kOppositemarks = 7           # 对向标识\n"
"int8 kStopLane = 8                # 停止线\n"
"int8 kZebraCrossing = 9           # 斑马线\n"
"int8 kNoParkingArea = 10          # 禁止停车\n"
"int8 kGoreArea = 11               # 分道角区\n"
"int8 kGroundWords = 12            # 地面文字\n"
"int8 kDecelerationLine = 13       # 减速标识\n"
"int8 kSpeedBump = 14              # 减速带\n"
"int8 kManholeCover = 15           # 井盖\n"
"int8 kPole = 16    			      # 路灯杆\n"
"int8 kTypeNums = 17               # 总类型数\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2fList\n"
"Point2f[] points\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point3DList\n"
"geometry_msgs/Point[] points \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mviz_apa_show::Roadmarks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roadmarks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Roadmarks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::Roadmarks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::Roadmarks_<ContainerAllocator>& v)
  {
    s << indent << "roadmarks[]" << std::endl;
    for (size_t i = 0; i < v.roadmarks.size(); ++i)
    {
      s << indent << "  roadmarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mviz_apa_show::Roadmark_<ContainerAllocator> >::stream(s, indent + "    ", v.roadmarks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_ROADMARKS_H
