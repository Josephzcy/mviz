// Generated by gencpp from file mviz_apa_show/EvalStats.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_EVALSTATS_H
#define MVIZ_APA_SHOW_MESSAGE_EVALSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct EvalStats_
{
  typedef EvalStats_<ContainerAllocator> Type;

  EvalStats_()
    : mean(0.0)
    , std(0.0)
    , prob(0.0)  {
    }
  EvalStats_(const ContainerAllocator& _alloc)
    : mean(0.0)
    , std(0.0)
    , prob(0.0)  {
  (void)_alloc;
    }



   typedef float _mean_type;
  _mean_type mean;

   typedef float _std_type;
  _std_type std;

   typedef float _prob_type;
  _prob_type prob;





  typedef boost::shared_ptr< ::mviz_apa_show::EvalStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::EvalStats_<ContainerAllocator> const> ConstPtr;

}; // struct EvalStats_

typedef ::mviz_apa_show::EvalStats_<std::allocator<void> > EvalStats;

typedef boost::shared_ptr< ::mviz_apa_show::EvalStats > EvalStatsPtr;
typedef boost::shared_ptr< ::mviz_apa_show::EvalStats const> EvalStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::EvalStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::EvalStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::EvalStats_<ContainerAllocator1> & lhs, const ::mviz_apa_show::EvalStats_<ContainerAllocator2> & rhs)
{
  return lhs.mean == rhs.mean &&
    lhs.std == rhs.std &&
    lhs.prob == rhs.prob;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::EvalStats_<ContainerAllocator1> & lhs, const ::mviz_apa_show::EvalStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::EvalStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::EvalStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::EvalStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbf043e945e30e41722d8cbe7a184469";
  }

  static const char* value(const ::mviz_apa_show::EvalStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbf043e945e30e41ULL;
  static const uint64_t static_value2 = 0x722d8cbe7a184469ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/EvalStats";
  }

  static const char* value(const ::mviz_apa_show::EvalStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 mean\n"
"float32 std \n"
"float32 prob\n"
;
  }

  static const char* value(const ::mviz_apa_show::EvalStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mean);
      stream.next(m.std);
      stream.next(m.prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvalStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::EvalStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::EvalStats_<ContainerAllocator>& v)
  {
    s << indent << "mean: ";
    Printer<float>::stream(s, indent + "  ", v.mean);
    s << indent << "std: ";
    Printer<float>::stream(s, indent + "  ", v.std);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_EVALSTATS_H
