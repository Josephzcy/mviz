// Generated by gencpp from file mviz_apa_show/VehicleControl.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_VEHICLECONTROL_H
#define MVIZ_APA_SHOW_MESSAGE_VEHICLECONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct VehicleControl_
{
  typedef VehicleControl_<ContainerAllocator> Type;

  VehicleControl_()
    : timestamp(0)
    , tick(0)
    , control_state(0)
    , wheel_cmd(0.0)
    , speed_cmd(0.0)
    , gear_mode(0)
    , dist_cmd(0.0)
    , is_reach_pathend(false)
    , l_bias_err(0.0)
    , yaw_bias_err(0.0)  {
    }
  VehicleControl_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , tick(0)
    , control_state(0)
    , wheel_cmd(0.0)
    , speed_cmd(0.0)
    , gear_mode(0)
    , dist_cmd(0.0)
    , is_reach_pathend(false)
    , l_bias_err(0.0)
    , yaw_bias_err(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _tick_type;
  _tick_type tick;

   typedef uint32_t _control_state_type;
  _control_state_type control_state;

   typedef float _wheel_cmd_type;
  _wheel_cmd_type wheel_cmd;

   typedef float _speed_cmd_type;
  _speed_cmd_type speed_cmd;

   typedef uint32_t _gear_mode_type;
  _gear_mode_type gear_mode;

   typedef float _dist_cmd_type;
  _dist_cmd_type dist_cmd;

   typedef uint8_t _is_reach_pathend_type;
  _is_reach_pathend_type is_reach_pathend;

   typedef float _l_bias_err_type;
  _l_bias_err_type l_bias_err;

   typedef float _yaw_bias_err_type;
  _yaw_bias_err_type yaw_bias_err;





  typedef boost::shared_ptr< ::mviz_apa_show::VehicleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::VehicleControl_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleControl_

typedef ::mviz_apa_show::VehicleControl_<std::allocator<void> > VehicleControl;

typedef boost::shared_ptr< ::mviz_apa_show::VehicleControl > VehicleControlPtr;
typedef boost::shared_ptr< ::mviz_apa_show::VehicleControl const> VehicleControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::VehicleControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::VehicleControl_<ContainerAllocator1> & lhs, const ::mviz_apa_show::VehicleControl_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.tick == rhs.tick &&
    lhs.control_state == rhs.control_state &&
    lhs.wheel_cmd == rhs.wheel_cmd &&
    lhs.speed_cmd == rhs.speed_cmd &&
    lhs.gear_mode == rhs.gear_mode &&
    lhs.dist_cmd == rhs.dist_cmd &&
    lhs.is_reach_pathend == rhs.is_reach_pathend &&
    lhs.l_bias_err == rhs.l_bias_err &&
    lhs.yaw_bias_err == rhs.yaw_bias_err;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::VehicleControl_<ContainerAllocator1> & lhs, const ::mviz_apa_show::VehicleControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::VehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::VehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::VehicleControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b88025b7059dd42c8ff00410c3e6efda";
  }

  static const char* value(const ::mviz_apa_show::VehicleControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb88025b7059dd42cULL;
  static const uint64_t static_value2 = 0x8ff00410c3e6efdaULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/VehicleControl";
  }

  static const char* value(const ::mviz_apa_show::VehicleControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64  timestamp        # 时间戳(单位：微秒)\n"
"uint64 tick              # 数据面时间(单位：微秒)\n"
"uint32  control_state    # 控制状态: 0|off, 1|shakehand, 2|execute_unspecified, 3|execute_waiting, 4|execute_moving, 5|suspend, 6|finish, 7|safe_stop\n"
"float32 wheel_cmd        # 方向盘指令(单位：°):左正右负\n"
"float32 speed_cmd        # 速度指令(单位：m/s)\n"
"uint32  gear_mode        # 档位指令：0|无效/不请求，1|空挡，2|前进，3|后退，4|P挡， 其它：无效值\n"
"float32 dist_cmd        # 距离指令：(单位：m) (针对部分车型apa“速度-距离”的控制模式接口)\n"
"bool    is_reach_pathend     # 是否到达路径终点(在控制execute_moving状态下，若未到达终点位置，发false，否则发true) 调试用\n"
"float32 l_bias_err       # 横向偏差(单位：m) 调试用\n"
"float32 yaw_bias_err     # 航向偏差(单位：°) 调试用\n"
;
  }

  static const char* value(const ::mviz_apa_show::VehicleControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.tick);
      stream.next(m.control_state);
      stream.next(m.wheel_cmd);
      stream.next(m.speed_cmd);
      stream.next(m.gear_mode);
      stream.next(m.dist_cmd);
      stream.next(m.is_reach_pathend);
      stream.next(m.l_bias_err);
      stream.next(m.yaw_bias_err);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::VehicleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::VehicleControl_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "tick: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tick);
    s << indent << "control_state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.control_state);
    s << indent << "wheel_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_cmd);
    s << indent << "speed_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.speed_cmd);
    s << indent << "gear_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gear_mode);
    s << indent << "dist_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.dist_cmd);
    s << indent << "is_reach_pathend: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_reach_pathend);
    s << indent << "l_bias_err: ";
    Printer<float>::stream(s, indent + "  ", v.l_bias_err);
    s << indent << "yaw_bias_err: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_bias_err);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_VEHICLECONTROL_H
