// Generated by gencpp from file mviz_apa_show/RoadmarkTypeEnum.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_ROADMARKTYPEENUM_H
#define MVIZ_APA_SHOW_MESSAGE_ROADMARKTYPEENUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct RoadmarkTypeEnum_
{
  typedef RoadmarkTypeEnum_<ContainerAllocator> Type;

  RoadmarkTypeEnum_()
    : value(0)  {
    }
  RoadmarkTypeEnum_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef int8_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(kBackGround)
  #undef kBackGround
#endif
#if defined(_WIN32) && defined(kStraightArrow)
  #undef kStraightArrow
#endif
#if defined(_WIN32) && defined(kLeftArrow)
  #undef kLeftArrow
#endif
#if defined(_WIN32) && defined(kRightArrow)
  #undef kRightArrow
#endif
#if defined(_WIN32) && defined(kUturnArrow)
  #undef kUturnArrow
#endif
#if defined(_WIN32) && defined(kDiamond)
  #undef kDiamond
#endif
#if defined(_WIN32) && defined(kInvertedTriangle)
  #undef kInvertedTriangle
#endif
#if defined(_WIN32) && defined(kOppositemarks)
  #undef kOppositemarks
#endif
#if defined(_WIN32) && defined(kStopLane)
  #undef kStopLane
#endif
#if defined(_WIN32) && defined(kZebraCrossing)
  #undef kZebraCrossing
#endif
#if defined(_WIN32) && defined(kNoParkingArea)
  #undef kNoParkingArea
#endif
#if defined(_WIN32) && defined(kGoreArea)
  #undef kGoreArea
#endif
#if defined(_WIN32) && defined(kGroundWords)
  #undef kGroundWords
#endif
#if defined(_WIN32) && defined(kDecelerationLine)
  #undef kDecelerationLine
#endif
#if defined(_WIN32) && defined(kSpeedBump)
  #undef kSpeedBump
#endif
#if defined(_WIN32) && defined(kManholeCover)
  #undef kManholeCover
#endif
#if defined(_WIN32) && defined(kPole)
  #undef kPole
#endif
#if defined(_WIN32) && defined(kTypeNums)
  #undef kTypeNums
#endif

  enum {
    kBackGround = 0,
    kStraightArrow = 1,
    kLeftArrow = 2,
    kRightArrow = 3,
    kUturnArrow = 4,
    kDiamond = 5,
    kInvertedTriangle = 6,
    kOppositemarks = 7,
    kStopLane = 8,
    kZebraCrossing = 9,
    kNoParkingArea = 10,
    kGoreArea = 11,
    kGroundWords = 12,
    kDecelerationLine = 13,
    kSpeedBump = 14,
    kManholeCover = 15,
    kPole = 16,
    kTypeNums = 17,
  };


  typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> const> ConstPtr;

}; // struct RoadmarkTypeEnum_

typedef ::mviz_apa_show::RoadmarkTypeEnum_<std::allocator<void> > RoadmarkTypeEnum;

typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkTypeEnum > RoadmarkTypeEnumPtr;
typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkTypeEnum const> RoadmarkTypeEnumConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91e504e17be391d014543360a6ea7e7f";
  }

  static const char* value(const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91e504e17be391d0ULL;
  static const uint64_t static_value2 = 0x14543360a6ea7e7fULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/RoadmarkTypeEnum";
  }

  static const char* value(const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 kBackGround = 0              # 背景\n"
"int8 kStraightArrow = 1           # 直行\n"
"int8 kLeftArrow = 2               # 左转\n"
"int8 kRightArrow = 3              # 右转\n"
"int8 kUturnArrow = 4              # 掉头\n"
"int8 kDiamond = 5                 # 菱形 (前方有人行横道)\n"
"int8 kInvertedTriangle = 6        # 倒三角 (减速让行)\n"
"int8 kOppositemarks = 7           # 对向标识\n"
"int8 kStopLane = 8                # 停止线\n"
"int8 kZebraCrossing = 9           # 斑马线\n"
"int8 kNoParkingArea = 10          # 禁止停车\n"
"int8 kGoreArea = 11               # 分道角区\n"
"int8 kGroundWords = 12            # 地面文字\n"
"int8 kDecelerationLine = 13       # 减速标识\n"
"int8 kSpeedBump = 14              # 减速带\n"
"int8 kManholeCover = 15           # 井盖\n"
"int8 kPole = 16    			      # 路灯杆\n"
"int8 kTypeNums = 17               # 总类型数\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadmarkTypeEnum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::RoadmarkTypeEnum_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_ROADMARKTYPEENUM_H
