// Generated by gencpp from file mviz_apa_show/EgoMotion.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_EGOMOTION_H
#define MVIZ_APA_SHOW_MESSAGE_EGOMOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct EgoMotion_
{
  typedef EgoMotion_<ContainerAllocator> Type;

  EgoMotion_()
    : speed_mps(0.0)
    , is_imu_valid(false)
    , dyaw(0.0)
    , is_dyaw_valid(false)
    , dpitch(0.0)
    , is_dpitch_valid(false)
    , dt_ms(0)
    , curr_timestamp(0)  {
    }
  EgoMotion_(const ContainerAllocator& _alloc)
    : speed_mps(0.0)
    , is_imu_valid(false)
    , dyaw(0.0)
    , is_dyaw_valid(false)
    , dpitch(0.0)
    , is_dpitch_valid(false)
    , dt_ms(0)
    , curr_timestamp(0)  {
  (void)_alloc;
    }



   typedef float _speed_mps_type;
  _speed_mps_type speed_mps;

   typedef uint8_t _is_imu_valid_type;
  _is_imu_valid_type is_imu_valid;

   typedef float _dyaw_type;
  _dyaw_type dyaw;

   typedef uint8_t _is_dyaw_valid_type;
  _is_dyaw_valid_type is_dyaw_valid;

   typedef float _dpitch_type;
  _dpitch_type dpitch;

   typedef uint8_t _is_dpitch_valid_type;
  _is_dpitch_valid_type is_dpitch_valid;

   typedef int32_t _dt_ms_type;
  _dt_ms_type dt_ms;

   typedef uint64_t _curr_timestamp_type;
  _curr_timestamp_type curr_timestamp;





  typedef boost::shared_ptr< ::mviz_apa_show::EgoMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::EgoMotion_<ContainerAllocator> const> ConstPtr;

}; // struct EgoMotion_

typedef ::mviz_apa_show::EgoMotion_<std::allocator<void> > EgoMotion;

typedef boost::shared_ptr< ::mviz_apa_show::EgoMotion > EgoMotionPtr;
typedef boost::shared_ptr< ::mviz_apa_show::EgoMotion const> EgoMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::EgoMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::EgoMotion_<ContainerAllocator1> & lhs, const ::mviz_apa_show::EgoMotion_<ContainerAllocator2> & rhs)
{
  return lhs.speed_mps == rhs.speed_mps &&
    lhs.is_imu_valid == rhs.is_imu_valid &&
    lhs.dyaw == rhs.dyaw &&
    lhs.is_dyaw_valid == rhs.is_dyaw_valid &&
    lhs.dpitch == rhs.dpitch &&
    lhs.is_dpitch_valid == rhs.is_dpitch_valid &&
    lhs.dt_ms == rhs.dt_ms &&
    lhs.curr_timestamp == rhs.curr_timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::EgoMotion_<ContainerAllocator1> & lhs, const ::mviz_apa_show::EgoMotion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::EgoMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::EgoMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::EgoMotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb5c1ff2ce48cb4237973fed996c2581";
  }

  static const char* value(const ::mviz_apa_show::EgoMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb5c1ff2ce48cb42ULL;
  static const uint64_t static_value2 = 0x37973fed996c2581ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/EgoMotion";
  }

  static const char* value(const ::mviz_apa_show::EgoMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed_mps           # m/s\n"
"bool is_imu_valid         # 是否去除bias\n"
"float32 dyaw                # delta yaw, unit: radian\n"
"bool is_dyaw_valid         # dyaw 标志位\n"
"float32 dpitch               # delta pitch, unit : radian\n"
"bool is_dpitch_valid       # dpitch 标志位\n"
"int32 dt_ms                # time lag between two images\n"
"uint64 curr_timestamp      # 当前时戳\n"
;
  }

  static const char* value(const ::mviz_apa_show::EgoMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_mps);
      stream.next(m.is_imu_valid);
      stream.next(m.dyaw);
      stream.next(m.is_dyaw_valid);
      stream.next(m.dpitch);
      stream.next(m.is_dpitch_valid);
      stream.next(m.dt_ms);
      stream.next(m.curr_timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::EgoMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::EgoMotion_<ContainerAllocator>& v)
  {
    s << indent << "speed_mps: ";
    Printer<float>::stream(s, indent + "  ", v.speed_mps);
    s << indent << "is_imu_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_imu_valid);
    s << indent << "dyaw: ";
    Printer<float>::stream(s, indent + "  ", v.dyaw);
    s << indent << "is_dyaw_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dyaw_valid);
    s << indent << "dpitch: ";
    Printer<float>::stream(s, indent + "  ", v.dpitch);
    s << indent << "is_dpitch_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dpitch_valid);
    s << indent << "dt_ms: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dt_ms);
    s << indent << "curr_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.curr_timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_EGOMOTION_H
