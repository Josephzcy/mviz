// Generated by gencpp from file mviz_apa_show/PoseEst.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_POSEEST_H
#define MVIZ_APA_SHOW_MESSAGE_POSEEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/Point2f.h>
#include <mviz_apa_show/Point2f.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct PoseEst_
{
  typedef PoseEst_<ContainerAllocator> Type;

  PoseEst_()
    : pitch_est(0.0)
    , vanish_pt()
    , vanish_cov()
    , is_valid(false)
    , camera_id(0)
    , dpitch(0.0)
    , confidence(0.0)  {
    }
  PoseEst_(const ContainerAllocator& _alloc)
    : pitch_est(0.0)
    , vanish_pt(_alloc)
    , vanish_cov(_alloc)
    , is_valid(false)
    , camera_id(0)
    , dpitch(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef float _pitch_est_type;
  _pitch_est_type pitch_est;

   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _vanish_pt_type;
  _vanish_pt_type vanish_pt;

   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _vanish_cov_type;
  _vanish_cov_type vanish_cov;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef uint32_t _camera_id_type;
  _camera_id_type camera_id;

   typedef float _dpitch_type;
  _dpitch_type dpitch;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::mviz_apa_show::PoseEst_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::PoseEst_<ContainerAllocator> const> ConstPtr;

}; // struct PoseEst_

typedef ::mviz_apa_show::PoseEst_<std::allocator<void> > PoseEst;

typedef boost::shared_ptr< ::mviz_apa_show::PoseEst > PoseEstPtr;
typedef boost::shared_ptr< ::mviz_apa_show::PoseEst const> PoseEstConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::PoseEst_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::PoseEst_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::PoseEst_<ContainerAllocator1> & lhs, const ::mviz_apa_show::PoseEst_<ContainerAllocator2> & rhs)
{
  return lhs.pitch_est == rhs.pitch_est &&
    lhs.vanish_pt == rhs.vanish_pt &&
    lhs.vanish_cov == rhs.vanish_cov &&
    lhs.is_valid == rhs.is_valid &&
    lhs.camera_id == rhs.camera_id &&
    lhs.dpitch == rhs.dpitch &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::PoseEst_<ContainerAllocator1> & lhs, const ::mviz_apa_show::PoseEst_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::PoseEst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::PoseEst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::PoseEst_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de1d5d289a1d2eac476a6dd0149be97f";
  }

  static const char* value(const ::mviz_apa_show::PoseEst_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde1d5d289a1d2eacULL;
  static const uint64_t static_value2 = 0x476a6dd0149be97fULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/PoseEst";
  }

  static const char* value(const ::mviz_apa_show::PoseEst_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pitch_est                                              # 估计pitch(单位: radian) 类型:float32 字节数:4 取值范围:[-0.175, 0.175]\n"
"Point2f vanish_pt                         # 灭点 字节数：8\n"
"Point2f vanish_cov                        # 灭点协方差 字节数：8\n"
"bool is_valid 												 # 灭点有效标志 字节数：1\n"
"uint32 camera_id                                             # 摄像头id\n"
"float32 dpitch                                                # delta pitch (unit: radian)\n"
"float32 confidence                                            # 置信度\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::mviz_apa_show::PoseEst_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch_est);
      stream.next(m.vanish_pt);
      stream.next(m.vanish_cov);
      stream.next(m.is_valid);
      stream.next(m.camera_id);
      stream.next(m.dpitch);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseEst_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::PoseEst_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::PoseEst_<ContainerAllocator>& v)
  {
    s << indent << "pitch_est: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_est);
    s << indent << "vanish_pt: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.vanish_pt);
    s << indent << "vanish_cov: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.vanish_cov);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "camera_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.camera_id);
    s << indent << "dpitch: ";
    Printer<float>::stream(s, indent + "  ", v.dpitch);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_POSEEST_H
