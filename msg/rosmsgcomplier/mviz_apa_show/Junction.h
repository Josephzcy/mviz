// Generated by gencpp from file mviz_apa_show/Junction.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_JUNCTION_H
#define MVIZ_APA_SHOW_MESSAGE_JUNCTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/Point2f.h>
#include <mviz_apa_show/Point2f.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct Junction_
{
  typedef Junction_<ContainerAllocator> Type;

  Junction_()
    : pt_image_coord()
    , pt_vehicle_coord()
    , laneline_id()
    , state(0)
    , confidence(0.0)
    , pos(0)  {
    }
  Junction_(const ContainerAllocator& _alloc)
    : pt_image_coord(_alloc)
    , pt_vehicle_coord(_alloc)
    , laneline_id(_alloc)
    , state(0)
    , confidence(0.0)
    , pos(0)  {
  (void)_alloc;
    }



   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _pt_image_coord_type;
  _pt_image_coord_type pt_image_coord;

   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _pt_vehicle_coord_type;
  _pt_vehicle_coord_type pt_vehicle_coord;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _laneline_id_type;
  _laneline_id_type laneline_id;

   typedef int32_t _state_type;
  _state_type state;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int32_t _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::mviz_apa_show::Junction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::Junction_<ContainerAllocator> const> ConstPtr;

}; // struct Junction_

typedef ::mviz_apa_show::Junction_<std::allocator<void> > Junction;

typedef boost::shared_ptr< ::mviz_apa_show::Junction > JunctionPtr;
typedef boost::shared_ptr< ::mviz_apa_show::Junction const> JunctionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::Junction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::Junction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::Junction_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Junction_<ContainerAllocator2> & rhs)
{
  return lhs.pt_image_coord == rhs.pt_image_coord &&
    lhs.pt_vehicle_coord == rhs.pt_vehicle_coord &&
    lhs.laneline_id == rhs.laneline_id &&
    lhs.state == rhs.state &&
    lhs.confidence == rhs.confidence &&
    lhs.pos == rhs.pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::Junction_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Junction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Junction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Junction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Junction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Junction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Junction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Junction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::Junction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce40608aba0e57f0e8a76c6b77e7717f";
  }

  static const char* value(const ::mviz_apa_show::Junction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce40608aba0e57f0ULL;
  static const uint64_t static_value2 = 0xe8a76c6b77e7717fULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::Junction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/Junction";
  }

  static const char* value(const ::mviz_apa_show::Junction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::Junction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 道路合流分流点, 总字节数64\n"
"# Type type = 1                    # 类型 字节数:4\n"
"Point2f pt_image_coord     # 图像坐标 字节数:8 \n"
"Point2f pt_vehicle_coord   # 车身坐标 字节数:8 \n"
"uint64[] laneline_id                   # 形成交叉点的车道线id  字节数:32 (最多4个)\n"
"int32 state                                   # 状态 字节数:4 \n"
"float32 confidence                              # 置信度 字节数:4\n"
"int32 pos                                       # 位置  字节数：4 1-> 左边 2-> 右边\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::mviz_apa_show::Junction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::Junction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pt_image_coord);
      stream.next(m.pt_vehicle_coord);
      stream.next(m.laneline_id);
      stream.next(m.state);
      stream.next(m.confidence);
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Junction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::Junction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::Junction_<ContainerAllocator>& v)
  {
    s << indent << "pt_image_coord: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.pt_image_coord);
    s << indent << "pt_vehicle_coord: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.pt_vehicle_coord);
    s << indent << "laneline_id[]" << std::endl;
    for (size_t i = 0; i < v.laneline_id.size(); ++i)
    {
      s << indent << "  laneline_id[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.laneline_id[i]);
    }
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_JUNCTION_H
