// Generated by gencpp from file mviz_apa_show/LineTypeEnum.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_LINETYPEENUM_H
#define MVIZ_APA_SHOW_MESSAGE_LINETYPEENUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct LineTypeEnum_
{
  typedef LineTypeEnum_<ContainerAllocator> Type;

  LineTypeEnum_()
    : value(0)  {
    }
  LineTypeEnum_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef int8_t _value_type;
  _value_type value;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(kLineSingleSolid)
  #undef kLineSingleSolid
#endif
#if defined(_WIN32) && defined(kLineSingleDashed)
  #undef kLineSingleDashed
#endif
#if defined(_WIN32) && defined(kLineBold)
  #undef kLineBold
#endif
#if defined(_WIN32) && defined(kLineDoubleSolid)
  #undef kLineDoubleSolid
#endif
#if defined(_WIN32) && defined(kLineDoubleDashed)
  #undef kLineDoubleDashed
#endif
#if defined(_WIN32) && defined(kLineSolidDashed)
  #undef kLineSolidDashed
#endif
#if defined(_WIN32) && defined(kLineDashedSolid)
  #undef kLineDashedSolid
#endif
#if defined(_WIN32) && defined(kFence)
  #undef kFence
#endif
#if defined(_WIN32) && defined(kCurb)
  #undef kCurb
#endif
#if defined(_WIN32) && defined(kLineFishboneSolid)
  #undef kLineFishboneSolid
#endif
#if defined(_WIN32) && defined(kLineFishboneDashed)
  #undef kLineFishboneDashed
#endif
#if defined(_WIN32) && defined(kLineChangeable)
  #undef kLineChangeable
#endif
#if defined(_WIN32) && defined(kLineUnknown)
  #undef kLineUnknown
#endif

  enum {
    kLineSingleSolid = 0,
    kLineSingleDashed = 1,
    kLineBold = 2,
    kLineDoubleSolid = 3,
    kLineDoubleDashed = 4,
    kLineSolidDashed = 5,
    kLineDashedSolid = 6,
    kFence = 7,
    kCurb = 8,
    kLineFishboneSolid = 9,
    kLineFishboneDashed = 10,
    kLineChangeable = 11,
    kLineUnknown = 12,
  };


  typedef boost::shared_ptr< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> const> ConstPtr;

}; // struct LineTypeEnum_

typedef ::mviz_apa_show::LineTypeEnum_<std::allocator<void> > LineTypeEnum;

typedef boost::shared_ptr< ::mviz_apa_show::LineTypeEnum > LineTypeEnumPtr;
typedef boost::shared_ptr< ::mviz_apa_show::LineTypeEnum const> LineTypeEnumConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81dfac1cb8e881a2efa94baf075999a6";
  }

  static const char* value(const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81dfac1cb8e881a2ULL;
  static const uint64_t static_value2 = 0xefa94baf075999a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/LineTypeEnum";
  }

  static const char* value(const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 kLineSingleSolid = 0   # 实线\n"
"int8 kLineSingleDashed = 1  # 虚线\n"
"int8 kLineBold = 2          # 短粗虚线（道路出入口标线）\n"
"int8 kLineDoubleSolid = 3   # 双实线\n"
"int8 kLineDoubleDashed = 4  # 双虚线\n"
"int8 kLineSolidDashed = 5   # 实虚线\n"
"int8 kLineDashedSolid = 6   # 虚实线\n"
"int8 kFence = 7             # 栅栏\n"
"int8 kCurb=8                # 路沿\n"
"int8 kLineFishboneSolid = 9  # 减速线-实线\n"
"int8 kLineFishboneDashed = 10  # 减速线-虚线\n"
"int8 kLineChangeable = 11      # 可变车道线\n"
"int8 kLineUnknown = 12\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineTypeEnum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::LineTypeEnum_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<int8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_LINETYPEENUM_H
