// Generated by gencpp from file mviz_apa_show/Roadmark.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_ROADMARK_H
#define MVIZ_APA_SHOW_MESSAGE_ROADMARK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/RoadmarkType.h>
#include <mviz_apa_show/Point2fList.h>
#include <mviz_apa_show/Point3DList.h>
#include <geometry_msgs/Point.h>
#include <mviz_apa_show/Point2f.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct Roadmark_
{
  typedef Roadmark_<ContainerAllocator> Type;

  Roadmark_()
    : id(0)
    , type()
    , corner_pt_image_coord()
    , corner_pt_vehicle_coord()
    , centroid_vehicle_coord()
    , confidence(0.0)
    , lane_idx(0)
    , centroid_image_coord()
    , width(0.0)
    , camera_id(0)  {
    }
  Roadmark_(const ContainerAllocator& _alloc)
    : id(0)
    , type(_alloc)
    , corner_pt_image_coord(_alloc)
    , corner_pt_vehicle_coord(_alloc)
    , centroid_vehicle_coord(_alloc)
    , confidence(0.0)
    , lane_idx(0)
    , centroid_image_coord(_alloc)
    , width(0.0)
    , camera_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef  ::mviz_apa_show::RoadmarkType_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::mviz_apa_show::Point2fList_<ContainerAllocator>  _corner_pt_image_coord_type;
  _corner_pt_image_coord_type corner_pt_image_coord;

   typedef  ::mviz_apa_show::Point3DList_<ContainerAllocator>  _corner_pt_vehicle_coord_type;
  _corner_pt_vehicle_coord_type corner_pt_vehicle_coord;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _centroid_vehicle_coord_type;
  _centroid_vehicle_coord_type centroid_vehicle_coord;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef uint32_t _lane_idx_type;
  _lane_idx_type lane_idx;

   typedef  ::mviz_apa_show::Point2f_<ContainerAllocator>  _centroid_image_coord_type;
  _centroid_image_coord_type centroid_image_coord;

   typedef float _width_type;
  _width_type width;

   typedef uint32_t _camera_id_type;
  _camera_id_type camera_id;





  typedef boost::shared_ptr< ::mviz_apa_show::Roadmark_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::Roadmark_<ContainerAllocator> const> ConstPtr;

}; // struct Roadmark_

typedef ::mviz_apa_show::Roadmark_<std::allocator<void> > Roadmark;

typedef boost::shared_ptr< ::mviz_apa_show::Roadmark > RoadmarkPtr;
typedef boost::shared_ptr< ::mviz_apa_show::Roadmark const> RoadmarkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::Roadmark_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::Roadmark_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::Roadmark_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Roadmark_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.corner_pt_image_coord == rhs.corner_pt_image_coord &&
    lhs.corner_pt_vehicle_coord == rhs.corner_pt_vehicle_coord &&
    lhs.centroid_vehicle_coord == rhs.centroid_vehicle_coord &&
    lhs.confidence == rhs.confidence &&
    lhs.lane_idx == rhs.lane_idx &&
    lhs.centroid_image_coord == rhs.centroid_image_coord &&
    lhs.width == rhs.width &&
    lhs.camera_id == rhs.camera_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::Roadmark_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Roadmark_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Roadmark_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Roadmark_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Roadmark_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "367415455d39f72ed91323a2ff44cbee";
  }

  static const char* value(const ::mviz_apa_show::Roadmark_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x367415455d39f72eULL;
  static const uint64_t static_value2 = 0xd91323a2ff44cbeeULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/Roadmark";
  }

  static const char* value(const ::mviz_apa_show::Roadmark_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id                                                    # id 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"RoadmarkType type                                                    # 类型 类型:int 字节数:4 取值范围:(0~17)\n"
"Point2fList corner_pt_image_coord     # 外接矩形角点图像坐标 字节数:64 取值范围(w>=x>=0, h>=y>=0) 容量:4\n"
"Point3DList corner_pt_vehicle_coord   # 外接矩形角点世界坐标 字节数:96 取值范围(100>=x>=0, 20>=y>=-20) 容量:4\n"
"geometry_msgs/Point centroid_vehicle_coord             # 质心世界坐标 字节数:24 取值范围(100>=x>=0, 20>=y>=-20)\n"
"float32 confidence                                            # 置信度 类型:float32 字节数:4 取值范围:(0~1)\n"
"uint32 lane_idx                                              # 路面标识所在的lane id 类型:uint32 字节数:4 取值范围:(0~7)\n"
"# Form form                                             \n"
"# State state\n"
"Point2f centroid_image_coord\n"
"float32 width                                                # 线型标识世界坐标下的宽度\n"
"uint32 camera_id                                            # 摄像头id\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadmarkType\n"
"RoadmarkTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadmarkTypeEnum\n"
"int8 kBackGround = 0              # 背景\n"
"int8 kStraightArrow = 1           # 直行\n"
"int8 kLeftArrow = 2               # 左转\n"
"int8 kRightArrow = 3              # 右转\n"
"int8 kUturnArrow = 4              # 掉头\n"
"int8 kDiamond = 5                 # 菱形 (前方有人行横道)\n"
"int8 kInvertedTriangle = 6        # 倒三角 (减速让行)\n"
"int8 kOppositemarks = 7           # 对向标识\n"
"int8 kStopLane = 8                # 停止线\n"
"int8 kZebraCrossing = 9           # 斑马线\n"
"int8 kNoParkingArea = 10          # 禁止停车\n"
"int8 kGoreArea = 11               # 分道角区\n"
"int8 kGroundWords = 12            # 地面文字\n"
"int8 kDecelerationLine = 13       # 减速标识\n"
"int8 kSpeedBump = 14              # 减速带\n"
"int8 kManholeCover = 15           # 井盖\n"
"int8 kPole = 16    			      # 路灯杆\n"
"int8 kTypeNums = 17               # 总类型数\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2fList\n"
"Point2f[] points\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point3DList\n"
"geometry_msgs/Point[] points \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mviz_apa_show::Roadmark_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.corner_pt_image_coord);
      stream.next(m.corner_pt_vehicle_coord);
      stream.next(m.centroid_vehicle_coord);
      stream.next(m.confidence);
      stream.next(m.lane_idx);
      stream.next(m.centroid_image_coord);
      stream.next(m.width);
      stream.next(m.camera_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Roadmark_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::Roadmark_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::Roadmark_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::mviz_apa_show::RoadmarkType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "corner_pt_image_coord: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2fList_<ContainerAllocator> >::stream(s, indent + "  ", v.corner_pt_image_coord);
    s << indent << "corner_pt_vehicle_coord: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point3DList_<ContainerAllocator> >::stream(s, indent + "  ", v.corner_pt_vehicle_coord);
    s << indent << "centroid_vehicle_coord: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid_vehicle_coord);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "lane_idx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lane_idx);
    s << indent << "centroid_image_coord: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Point2f_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid_image_coord);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "camera_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.camera_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_ROADMARK_H
