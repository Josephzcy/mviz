// Generated by gencpp from file mviz_apa_show/Box3D.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_BOX3D_H
#define MVIZ_APA_SHOW_MESSAGE_BOX3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct Box3D_
{
  typedef Box3D_<ContainerAllocator> Type;

  Box3D_()
    : lower_lt()
    , lower_lb()
    , lower_rb()
    , lower_rt()
    , upper_lt()
    , upper_lb()
    , upper_rb()
    , upper_rt()
    , conf(0.0)  {
    }
  Box3D_(const ContainerAllocator& _alloc)
    : lower_lt(_alloc)
    , lower_lb(_alloc)
    , lower_rb(_alloc)
    , lower_rt(_alloc)
    , upper_lt(_alloc)
    , upper_lb(_alloc)
    , upper_rb(_alloc)
    , upper_rt(_alloc)
    , conf(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lower_lt_type;
  _lower_lt_type lower_lt;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lower_lb_type;
  _lower_lb_type lower_lb;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lower_rb_type;
  _lower_rb_type lower_rb;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lower_rt_type;
  _lower_rt_type lower_rt;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _upper_lt_type;
  _upper_lt_type upper_lt;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _upper_lb_type;
  _upper_lb_type upper_lb;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _upper_rb_type;
  _upper_rb_type upper_rb;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _upper_rt_type;
  _upper_rt_type upper_rt;

   typedef float _conf_type;
  _conf_type conf;





  typedef boost::shared_ptr< ::mviz_apa_show::Box3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::Box3D_<ContainerAllocator> const> ConstPtr;

}; // struct Box3D_

typedef ::mviz_apa_show::Box3D_<std::allocator<void> > Box3D;

typedef boost::shared_ptr< ::mviz_apa_show::Box3D > Box3DPtr;
typedef boost::shared_ptr< ::mviz_apa_show::Box3D const> Box3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::Box3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::Box3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::Box3D_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Box3D_<ContainerAllocator2> & rhs)
{
  return lhs.lower_lt == rhs.lower_lt &&
    lhs.lower_lb == rhs.lower_lb &&
    lhs.lower_rb == rhs.lower_rb &&
    lhs.lower_rt == rhs.lower_rt &&
    lhs.upper_lt == rhs.upper_lt &&
    lhs.upper_lb == rhs.upper_lb &&
    lhs.upper_rb == rhs.upper_rb &&
    lhs.upper_rt == rhs.upper_rt &&
    lhs.conf == rhs.conf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::Box3D_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Box3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Box3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Box3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Box3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Box3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Box3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Box3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::Box3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "768c9c1163e2bc1c09a860bc3ae809ec";
  }

  static const char* value(const ::mviz_apa_show::Box3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x768c9c1163e2bc1cULL;
  static const uint64_t static_value2 = 0x09a860bc3ae809ecULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::Box3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/Box3D";
  }

  static const char* value(const ::mviz_apa_show::Box3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::Box3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point lower_lt\n"
"geometry_msgs/Point lower_lb\n"
"geometry_msgs/Point lower_rb\n"
"geometry_msgs/Point lower_rt\n"
"geometry_msgs/Point upper_lt\n"
"geometry_msgs/Point upper_lb\n"
"geometry_msgs/Point upper_rb\n"
"geometry_msgs/Point upper_rt\n"
"float32 conf\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mviz_apa_show::Box3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::Box3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lower_lt);
      stream.next(m.lower_lb);
      stream.next(m.lower_rb);
      stream.next(m.lower_rt);
      stream.next(m.upper_lt);
      stream.next(m.upper_lb);
      stream.next(m.upper_rb);
      stream.next(m.upper_rt);
      stream.next(m.conf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Box3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::Box3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::Box3D_<ContainerAllocator>& v)
  {
    s << indent << "lower_lt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_lt);
    s << indent << "lower_lb: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_lb);
    s << indent << "lower_rb: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_rb);
    s << indent << "lower_rt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lower_rt);
    s << indent << "upper_lt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_lt);
    s << indent << "upper_lb: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_lb);
    s << indent << "upper_rb: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_rb);
    s << indent << "upper_rt: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_rt);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_BOX3D_H
