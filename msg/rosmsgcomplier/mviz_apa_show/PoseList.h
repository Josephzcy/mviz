// Generated by gencpp from file mviz_apa_show/PoseList.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_POSELIST_H
#define MVIZ_APA_SHOW_MESSAGE_POSELIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/Pose.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct PoseList_
{
  typedef PoseList_<ContainerAllocator> Type;

  PoseList_()
    : pose_list()  {
    }
  PoseList_(const ContainerAllocator& _alloc)
    : pose_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mviz_apa_show::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mviz_apa_show::Pose_<ContainerAllocator> >::other >  _pose_list_type;
  _pose_list_type pose_list;





  typedef boost::shared_ptr< ::mviz_apa_show::PoseList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::PoseList_<ContainerAllocator> const> ConstPtr;

}; // struct PoseList_

typedef ::mviz_apa_show::PoseList_<std::allocator<void> > PoseList;

typedef boost::shared_ptr< ::mviz_apa_show::PoseList > PoseListPtr;
typedef boost::shared_ptr< ::mviz_apa_show::PoseList const> PoseListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::PoseList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::PoseList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::PoseList_<ContainerAllocator1> & lhs, const ::mviz_apa_show::PoseList_<ContainerAllocator2> & rhs)
{
  return lhs.pose_list == rhs.pose_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::PoseList_<ContainerAllocator1> & lhs, const ::mviz_apa_show::PoseList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::PoseList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::PoseList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::PoseList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::PoseList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::PoseList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::PoseList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::PoseList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2f3b8575137bcbc9608d94ba8886879";
  }

  static const char* value(const ::mviz_apa_show::PoseList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2f3b8575137bcbcULL;
  static const uint64_t static_value2 = 0x9608d94ba8886879ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::PoseList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/PoseList";
  }

  static const char* value(const ::mviz_apa_show::PoseList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::PoseList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Pose[] pose_list\n"
"================================================================================\n"
"MSG: mviz_apa_show/Pose\n"
"uint64 timestamp_us    # time stamp us\n"
"Point3f pose           #  [x, y, theta] [meter, meter, rad]\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point3f\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::mviz_apa_show::PoseList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::PoseList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::PoseList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::PoseList_<ContainerAllocator>& v)
  {
    s << indent << "pose_list[]" << std::endl;
    for (size_t i = 0; i < v.pose_list.size(); ++i)
    {
      s << indent << "  pose_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mviz_apa_show::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.pose_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_POSELIST_H
