// Generated by gencpp from file mviz_apa_show/ParkingSpace.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_PARKINGSPACE_H
#define MVIZ_APA_SHOW_MESSAGE_PARKINGSPACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/ParkingSlot.h>
#include <mviz_apa_show/DataSource.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct ParkingSpace_
{
  typedef ParkingSpace_<ContainerAllocator> Type;

  ParkingSpace_()
    : parkslots()
    , frame_id(0)
    , timestamp(0)
    , tick(0)
    , source()  {
    }
  ParkingSpace_(const ContainerAllocator& _alloc)
    : parkslots(_alloc)
    , frame_id(0)
    , timestamp(0)
    , tick(0)
    , source(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mviz_apa_show::ParkingSlot_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mviz_apa_show::ParkingSlot_<ContainerAllocator> >::other >  _parkslots_type;
  _parkslots_type parkslots;

   typedef uint64_t _frame_id_type;
  _frame_id_type frame_id;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _tick_type;
  _tick_type tick;

   typedef  ::mviz_apa_show::DataSource_<ContainerAllocator>  _source_type;
  _source_type source;





  typedef boost::shared_ptr< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> const> ConstPtr;

}; // struct ParkingSpace_

typedef ::mviz_apa_show::ParkingSpace_<std::allocator<void> > ParkingSpace;

typedef boost::shared_ptr< ::mviz_apa_show::ParkingSpace > ParkingSpacePtr;
typedef boost::shared_ptr< ::mviz_apa_show::ParkingSpace const> ParkingSpaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::ParkingSpace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::ParkingSpace_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ParkingSpace_<ContainerAllocator2> & rhs)
{
  return lhs.parkslots == rhs.parkslots &&
    lhs.frame_id == rhs.frame_id &&
    lhs.timestamp == rhs.timestamp &&
    lhs.tick == rhs.tick &&
    lhs.source == rhs.source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::ParkingSpace_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ParkingSpace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2310e190b38581461b7ee91b418973b5";
  }

  static const char* value(const ::mviz_apa_show::ParkingSpace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2310e190b3858146ULL;
  static const uint64_t static_value2 = 0x1b7ee91b418973b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/ParkingSpace";
  }

  static const char* value(const ::mviz_apa_show::ParkingSpace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ParkingSlot[] parkslots \n"
"uint64 frame_id\n"
"uint64 timestamp       # 管理面时间(ms)\n"
"uint64 tick            # 数据面时间(ms)\n"
"DataSource source      # 数据源（camera, ultra_radar）\n"
"\n"
"================================================================================\n"
"MSG: mviz_apa_show/ParkingSlot\n"
"uint32 id\n"
"CornerPt[] corner_pts    # 车位四个角点坐标\n"
"ParkSlotType type               # 车位类型\n"
"bool occupied                   # 车位里是否有障碍物\n"
"float64 width                     # 车位宽（m）\n"
"float64 length                    # 车位长 (m)\n"
"================================================================================\n"
"MSG: mviz_apa_show/CornerPt\n"
"uint32 id \n"
"Point2f image_pt   # 图像坐标 (pixel)\n"
"Point2f vehicle_pt   # 相对车身的物理坐标（m）(后处理模块debug用，右前上)\n"
"Point2f odom_pt   # odom坐标系下的物理坐标（m）\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: mviz_apa_show/ParkSlotType\n"
"ParkSlotTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/ParkSlotTypeEnum\n"
"int8 kUnknown = 0 \n"
"int8 kVerticalSpot = 1           # 垂直车位\n"
"int8 kHorizontalSpot = 2         # 水平车位\n"
"int8 kObliqueSpot = 3            # 斜车位\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/DataSource\n"
"DataSourceEnum source\n"
"================================================================================\n"
"MSG: mviz_apa_show/DataSourceEnum\n"
"int8 kMinieye   = 0\n"
"int8 kEyeQ3     = 1\n"
"int8 kEyeQ4     = 2\n"
"int8 kJ2        = 3\n"
"int8 kLidar     = 4      # 纯激光雷达\n"
"int8 kCamera    = 5      # 纯摄像头\n"
"int8 kCameraLidar = 6    # 摄像头激光雷达融合\n"
"int8 kUltraRadar = 7     # 超声波雷达\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::ParkingSpace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parkslots);
      stream.next(m.frame_id);
      stream.next(m.timestamp);
      stream.next(m.tick);
      stream.next(m.source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkingSpace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::ParkingSpace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::ParkingSpace_<ContainerAllocator>& v)
  {
    s << indent << "parkslots[]" << std::endl;
    for (size_t i = 0; i < v.parkslots.size(); ++i)
    {
      s << indent << "  parkslots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mviz_apa_show::ParkingSlot_<ContainerAllocator> >::stream(s, indent + "    ", v.parkslots[i]);
    }
    s << indent << "frame_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "tick: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tick);
    s << indent << "source: ";
    s << std::endl;
    Printer< ::mviz_apa_show::DataSource_<ContainerAllocator> >::stream(s, indent + "  ", v.source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_PARKINGSPACE_H
