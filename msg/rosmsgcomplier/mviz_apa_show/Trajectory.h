// Generated by gencpp from file mviz_apa_show/Trajectory.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_TRAJECTORY_H
#define MVIZ_APA_SHOW_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/TrajectoryPoint.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : timestamp(0)
    , tick(0)
    , id(0)
    , gear(0)
    , type(0)
    , trajectory()
    , total_length(0.0)
    , total_time(0.0)  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , tick(0)
    , id(0)
    , gear(0)
    , type(0)
    , trajectory(_alloc)
    , total_length(0.0)
    , total_time(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _tick_type;
  _tick_type tick;

   typedef uint32_t _id_type;
  _id_type id;

   typedef int32_t _gear_type;
  _gear_type gear;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::vector< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >::other >  _trajectory_type;
  _trajectory_type trajectory;

   typedef float _total_length_type;
  _total_length_type total_length;

   typedef float _total_time_type;
  _total_time_type total_time;





  typedef boost::shared_ptr< ::mviz_apa_show::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::mviz_apa_show::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::mviz_apa_show::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::mviz_apa_show::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::Trajectory_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Trajectory_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.tick == rhs.tick &&
    lhs.id == rhs.id &&
    lhs.gear == rhs.gear &&
    lhs.type == rhs.type &&
    lhs.trajectory == rhs.trajectory &&
    lhs.total_length == rhs.total_length &&
    lhs.total_time == rhs.total_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::Trajectory_<ContainerAllocator1> & lhs, const ::mviz_apa_show::Trajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1af1e481446d63794703714015f4bafb";
  }

  static const char* value(const ::mviz_apa_show::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1af1e481446d6379ULL;
  static const uint64_t static_value2 = 0x4703714015f4bafbULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/Trajectory";
  }

  static const char* value(const ::mviz_apa_show::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n"
"uint64 tick\n"
"uint32 id\n"
"int32 gear # 0-other, 1-R, 2-D\n"
"int32 type # 0-other, 1-line, 2-circle\n"
"TrajectoryPoint[] trajectory\n"
"float32 total_length\n"
"float32 total_time\n"
"================================================================================\n"
"MSG: mviz_apa_show/TrajectoryPoint\n"
"PathPoint path_point\n"
"float32 v\n"
"float32 a\n"
"float32 da\n"
"float32 rl_time\n"
"float32 steer\n"
"================================================================================\n"
"MSG: mviz_apa_show/PathPoint\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 theta\n"
"float32 s\n"
"float32 kappa\n"
"float32 dkappa\n"
"float32 ddkappa\n"
"float32 x_derivative\n"
"float32 y_derivative\n"
;
  }

  static const char* value(const ::mviz_apa_show::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.tick);
      stream.next(m.id);
      stream.next(m.gear);
      stream.next(m.type);
      stream.next(m.trajectory);
      stream.next(m.total_length);
      stream.next(m.total_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "tick: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tick);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "trajectory[]" << std::endl;
    for (size_t i = 0; i < v.trajectory.size(); ++i)
    {
      s << indent << "  trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mviz_apa_show::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory[i]);
    }
    s << indent << "total_length: ";
    Printer<float>::stream(s, indent + "  ", v.total_length);
    s << indent << "total_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_TRAJECTORY_H
