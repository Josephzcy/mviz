// Generated by gencpp from file mviz_apa_show/FusionRect3D.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_FUSIONRECT3D_H
#define MVIZ_APA_SHOW_MESSAGE_FUSIONRECT3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct FusionRect3D_
{
  typedef FusionRect3D_<ContainerAllocator> Type;

  FusionRect3D_()
    : Center()
    , CenterStdDev()
    , SizeLWH()
    , SizeStdDev()
    , Corners()  {
    }
  FusionRect3D_(const ContainerAllocator& _alloc)
    : Center(_alloc)
    , CenterStdDev(_alloc)
    , SizeLWH(_alloc)
    , SizeStdDev(_alloc)
    , Corners(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _Center_type;
  _Center_type Center;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _CenterStdDev_type;
  _CenterStdDev_type CenterStdDev;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _SizeLWH_type;
  _SizeLWH_type SizeLWH;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _SizeStdDev_type;
  _SizeStdDev_type SizeStdDev;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _Corners_type;
  _Corners_type Corners;





  typedef boost::shared_ptr< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> const> ConstPtr;

}; // struct FusionRect3D_

typedef ::mviz_apa_show::FusionRect3D_<std::allocator<void> > FusionRect3D;

typedef boost::shared_ptr< ::mviz_apa_show::FusionRect3D > FusionRect3DPtr;
typedef boost::shared_ptr< ::mviz_apa_show::FusionRect3D const> FusionRect3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::FusionRect3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::FusionRect3D_<ContainerAllocator1> & lhs, const ::mviz_apa_show::FusionRect3D_<ContainerAllocator2> & rhs)
{
  return lhs.Center == rhs.Center &&
    lhs.CenterStdDev == rhs.CenterStdDev &&
    lhs.SizeLWH == rhs.SizeLWH &&
    lhs.SizeStdDev == rhs.SizeStdDev &&
    lhs.Corners == rhs.Corners;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::FusionRect3D_<ContainerAllocator1> & lhs, const ::mviz_apa_show::FusionRect3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e08713e85d9988e34ea56d34457dbf2";
  }

  static const char* value(const ::mviz_apa_show::FusionRect3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e08713e85d9988eULL;
  static const uint64_t static_value2 = 0x34ea56d34457dbf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/FusionRect3D";
  }

  static const char* value(const ::mviz_apa_show::FusionRect3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point Center\n"
"geometry_msgs/Point CenterStdDev\n"
"geometry_msgs/Point SizeLWH\n"
"geometry_msgs/Point SizeStdDev\n"
"geometry_msgs/Point[] Corners\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mviz_apa_show::FusionRect3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Center);
      stream.next(m.CenterStdDev);
      stream.next(m.SizeLWH);
      stream.next(m.SizeStdDev);
      stream.next(m.Corners);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FusionRect3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::FusionRect3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::FusionRect3D_<ContainerAllocator>& v)
  {
    s << indent << "Center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.Center);
    s << indent << "CenterStdDev: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.CenterStdDev);
    s << indent << "SizeLWH: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.SizeLWH);
    s << indent << "SizeStdDev: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.SizeStdDev);
    s << indent << "Corners[]" << std::endl;
    for (size_t i = 0; i < v.Corners.size(); ++i)
    {
      s << indent << "  Corners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.Corners[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_FUSIONRECT3D_H
