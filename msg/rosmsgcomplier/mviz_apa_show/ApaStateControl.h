// Generated by gencpp from file mviz_apa_show/ApaStateControl.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_APASTATECONTROL_H
#define MVIZ_APA_SHOW_MESSAGE_APASTATECONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct ApaStateControl_
{
  typedef ApaStateControl_<ContainerAllocator> Type;

  ApaStateControl_()
    : settings_type()
    , state(0)
    , timestamp(0)
    , tick(0)
    , pilot_apa_mode(0)  {
    }
  ApaStateControl_(const ContainerAllocator& _alloc)
    : settings_type(_alloc)
    , state(0)
    , timestamp(0)
    , tick(0)
    , pilot_apa_mode(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _settings_type_type;
  _settings_type_type settings_type;

   typedef uint32_t _state_type;
  _state_type state;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _tick_type;
  _tick_type tick;

   typedef uint32_t _pilot_apa_mode_type;
  _pilot_apa_mode_type pilot_apa_mode;





  typedef boost::shared_ptr< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> const> ConstPtr;

}; // struct ApaStateControl_

typedef ::mviz_apa_show::ApaStateControl_<std::allocator<void> > ApaStateControl;

typedef boost::shared_ptr< ::mviz_apa_show::ApaStateControl > ApaStateControlPtr;
typedef boost::shared_ptr< ::mviz_apa_show::ApaStateControl const> ApaStateControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::ApaStateControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::ApaStateControl_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ApaStateControl_<ContainerAllocator2> & rhs)
{
  return lhs.settings_type == rhs.settings_type &&
    lhs.state == rhs.state &&
    lhs.timestamp == rhs.timestamp &&
    lhs.tick == rhs.tick &&
    lhs.pilot_apa_mode == rhs.pilot_apa_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::ApaStateControl_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ApaStateControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e322a589a9a632fce79d9c986336c7a";
  }

  static const char* value(const ::mviz_apa_show::ApaStateControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e322a589a9a632fULL;
  static const uint64_t static_value2 = 0xce79d9c986336c7aULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/ApaStateControl";
  }

  static const char* value(const ::mviz_apa_show::ApaStateControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] settings_type\n"
"uint32 state    		\n"
"uint64 timestamp           \n"
"uint64 tick                 \n"
"uint32 pilot_apa_mode       \n"
;
  }

  static const char* value(const ::mviz_apa_show::ApaStateControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.settings_type);
      stream.next(m.state);
      stream.next(m.timestamp);
      stream.next(m.tick);
      stream.next(m.pilot_apa_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ApaStateControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::ApaStateControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::ApaStateControl_<ContainerAllocator>& v)
  {
    s << indent << "settings_type[]" << std::endl;
    for (size_t i = 0; i < v.settings_type.size(); ++i)
    {
      s << indent << "  settings_type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.settings_type[i]);
    }
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "tick: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.tick);
    s << indent << "pilot_apa_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pilot_apa_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_APASTATECONTROL_H
