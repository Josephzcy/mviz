// Generated by gencpp from file mviz_apa_show/TransMatrix.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_TRANSMATRIX_H
#define MVIZ_APA_SHOW_MESSAGE_TRANSMATRIX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mviz_apa_show
{
template <class ContainerAllocator>
struct TransMatrix_
{
  typedef TransMatrix_<ContainerAllocator> Type;

  TransMatrix_()
    : vcsgnd2img()
    , img2vcsgnd()
    , local2img()
    , img2local()  {
    }
  TransMatrix_(const ContainerAllocator& _alloc)
    : vcsgnd2img(_alloc)
    , img2vcsgnd(_alloc)
    , local2img(_alloc)
    , img2local(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _vcsgnd2img_type;
  _vcsgnd2img_type vcsgnd2img;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _img2vcsgnd_type;
  _img2vcsgnd_type img2vcsgnd;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _local2img_type;
  _local2img_type local2img;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _img2local_type;
  _img2local_type img2local;





  typedef boost::shared_ptr< ::mviz_apa_show::TransMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::TransMatrix_<ContainerAllocator> const> ConstPtr;

}; // struct TransMatrix_

typedef ::mviz_apa_show::TransMatrix_<std::allocator<void> > TransMatrix;

typedef boost::shared_ptr< ::mviz_apa_show::TransMatrix > TransMatrixPtr;
typedef boost::shared_ptr< ::mviz_apa_show::TransMatrix const> TransMatrixConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::TransMatrix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::TransMatrix_<ContainerAllocator1> & lhs, const ::mviz_apa_show::TransMatrix_<ContainerAllocator2> & rhs)
{
  return lhs.vcsgnd2img == rhs.vcsgnd2img &&
    lhs.img2vcsgnd == rhs.img2vcsgnd &&
    lhs.local2img == rhs.local2img &&
    lhs.img2local == rhs.img2local;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::TransMatrix_<ContainerAllocator1> & lhs, const ::mviz_apa_show::TransMatrix_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::TransMatrix_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::TransMatrix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::TransMatrix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b7c8f17bba5d1a8c761c84a2423d0b9";
  }

  static const char* value(const ::mviz_apa_show::TransMatrix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b7c8f17bba5d1a8ULL;
  static const uint64_t static_value2 = 0xc761c84a2423d0b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/TransMatrix";
  }

  static const char* value(const ::mviz_apa_show::TransMatrix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 变换矩阵\n"
"float32[] vcsgnd2img     # 车身转图像 3x3\n"
"float32[] img2vcsgnd     # 图像转车身 3x3\n"
"float32[] local2img      # 局部世界坐标系转图像 3x3\n"
"float32[] img2local      # 图像转局部世界坐标系 3x3\n"
;
  }

  static const char* value(const ::mviz_apa_show::TransMatrix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vcsgnd2img);
      stream.next(m.img2vcsgnd);
      stream.next(m.local2img);
      stream.next(m.img2local);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransMatrix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::TransMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::TransMatrix_<ContainerAllocator>& v)
  {
    s << indent << "vcsgnd2img[]" << std::endl;
    for (size_t i = 0; i < v.vcsgnd2img.size(); ++i)
    {
      s << indent << "  vcsgnd2img[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vcsgnd2img[i]);
    }
    s << indent << "img2vcsgnd[]" << std::endl;
    for (size_t i = 0; i < v.img2vcsgnd.size(); ++i)
    {
      s << indent << "  img2vcsgnd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.img2vcsgnd[i]);
    }
    s << indent << "local2img[]" << std::endl;
    for (size_t i = 0; i < v.local2img.size(); ++i)
    {
      s << indent << "  local2img[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.local2img[i]);
    }
    s << indent << "img2local[]" << std::endl;
    for (size_t i = 0; i < v.img2local.size(); ++i)
    {
      s << indent << "  img2local[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.img2local[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_TRANSMATRIX_H
