// Generated by gencpp from file mviz_apa_show/RoadmarkingStamp.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_ROADMARKINGSTAMP_H
#define MVIZ_APA_SHOW_MESSAGE_ROADMARKINGSTAMP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mviz_apa_show/Roadmarking.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct RoadmarkingStamp_
{
  typedef RoadmarkingStamp_<ContainerAllocator> Type;

  RoadmarkingStamp_()
    : header()
    , lane()  {
    }
  RoadmarkingStamp_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lane(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mviz_apa_show::Roadmarking_<ContainerAllocator>  _lane_type;
  _lane_type lane;





  typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> const> ConstPtr;

}; // struct RoadmarkingStamp_

typedef ::mviz_apa_show::RoadmarkingStamp_<std::allocator<void> > RoadmarkingStamp;

typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkingStamp > RoadmarkingStampPtr;
typedef boost::shared_ptr< ::mviz_apa_show::RoadmarkingStamp const> RoadmarkingStampConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator1> & lhs, const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lane == rhs.lane;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator1> & lhs, const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "654d7575986f52aa4634f84e00b77859";
  }

  static const char* value(const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x654d7575986f52aaULL;
  static const uint64_t static_value2 = 0x4634f84e00b77859ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/RoadmarkingStamp";
  }

  static const char* value(const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"Roadmarking lane\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mviz_apa_show/Roadmarking\n"
"uint64 frame_id                                   # 帧ID 类型:uint64 字节数:8 取值范围:(0~2^64)\n"
"uint64 timestamp                                  # 对应的图像时戳 类型:uint64 字节数:8 取值范围:(0~2^64)\n"
"LanelineList laneline                             # 车道线 字节数:(0~39328)\n"
"FreeSpaces freespaces                             # 可通行区域 字节数:(12~6412)\n"
"Roadmarks roadmarkers                             # 路面标识 字节数:(0~3180)\n"
"RoadEdgeList road_edges                           # 路沿 字节数:(0~5080)\n"
"# LDWInfo ldw_info                                  # 告警信息 字节数:25\n"
"LanelineList calib_lines                          # 用于标定的车道线方程 字节数:(0~9824)\n"
"MotionEst motion                                 # 运动估计信息 字节数:12\n"
"PoseEst pose                                     # 姿态估计信息 字节数:4 (前视摄像头)\n"
"# HppInfo hpp_info                                 # 预测行驶线 字节数:(370-14770）\n"
"uint64 tick                                      # tick ms 字节数: 8\n"
"DataSource data_source                   # 描述数据源 字节数: 4\n"
"CurveCoeff slope_equation                        # 坡度方程 字节数 40\n"
"uint64 finish_time                            # 处理结束时间 字节数 8\n"
"JunctionList junc_list                          # 交叉点信息 字节数 256 (最多4个交叉点) \n"
"# RoadSysProfiling profiling_items                # 统计项\n"
"uint64 recv_time                                # 图像接收时间戳ms\n"
"float32 fps                                       # 车道线算法fps\n"
"EgoMotion ego_motion                    # 基于imu和can_speed估计两帧之间的运动\n"
"float32 ego_lane_width                            # 自车道宽度（m）\n"
"CamID cam_id                            # 摄像头id\n"
"uint32 lane_change                                # 车辆变道，跟LDW有点区别，这个是指左右线切换了。0： 无 1:左  2： 右\n"
"PoleList pole_list                              # 路灯杆\n"
"================================================================================\n"
"MSG: mviz_apa_show/LanelineList\n"
"Laneline[] line\n"
"================================================================================\n"
"MSG: mviz_apa_show/Laneline\n"
"LineType type                                                # 线型 类型:int 字节数:4 取值范围:(0~8)\n"
"LanelinePositionType pos_type                                # 位置 类型:int 字节数:4 取值范围:(0~8)\n"
"ColorType color_type                                         # 颜色 类型:int 字节数:4 取值范围:(0~4)\n"
"CurveCoeff curve_vehicle_coord                               # 车身坐标系下曲线方程 字节数:40\n"
"CurveCoeff curve_image_coord                                 # 图像坐标下曲线方程   字节数:40\n"
"\n"
"Point2fList points_image_coord             # 图像坐标系下的点集 (检测)  字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point3DList points_vehicle_coord           # 车身坐标系下的点集 (检测) 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"Point2fList fit_points_image_coord         # 图像坐标系下的点集 (拟合抽样) 字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point3DList fit_points_vehicle_coord       # 车身坐标系下的点集 (拟合抽样) 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"uint64 id                                                   # id 类型:uint64 字节数:8 取值范围(0~2^64)\n"
"LineState line_state                                        # 线状态 类型:int 字节数:4 取值范围:(0~2)\n"
"float32 confidence                                            # 置信度 类型:float 字节数:4 取值范围:(0~1)\n"
"float32 width                                                 # 车道线宽度(单位:m) 类型:float 字节数:4 取值范围:(0, 0.6)\n"
"uint32 age                                                  # 声明周期 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"uint32[] point_cam_id                                # 采样点对应的camera id  字节数: 16*n 取值范围 最大容量:255   \n"
"Point2f centroid_pt                       # 质心点坐标\n"
"int32 lane_id                                               # 车道线位置id(当前车道左侧从0向远处递减，右侧从1向远处递增)\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineType\n"
"LineTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineTypeEnum\n"
"int8 kLineSingleSolid = 0   # 实线\n"
"int8 kLineSingleDashed = 1  # 虚线\n"
"int8 kLineBold = 2          # 短粗虚线（道路出入口标线）\n"
"int8 kLineDoubleSolid = 3   # 双实线\n"
"int8 kLineDoubleDashed = 4  # 双虚线\n"
"int8 kLineSolidDashed = 5   # 实虚线\n"
"int8 kLineDashedSolid = 6   # 虚实线\n"
"int8 kFence = 7             # 栅栏\n"
"int8 kCurb=8                # 路沿\n"
"int8 kLineFishboneSolid = 9  # 减速线-实线\n"
"int8 kLineFishboneDashed = 10  # 减速线-虚线\n"
"int8 kLineChangeable = 11      # 可变车道线\n"
"int8 kLineUnknown = 12\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/LanelinePositionType\n"
"LanelinePositionTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LanelinePositionTypeEnum\n"
"int8 kAdjacentLeft = 0       # lane marking on the left side next to ego lane \n"
"int8 kEgoLeft = 1            # left lane marking of the ego lane \n"
"int8 kEgoRight = 2           # right lane marking of the ego lane \n"
"int8 kAdjacentRight = 3      # lane marking on the right side next to ego lane \n"
"int8 kThirdLeft = 4\n"
"int8 kThirdRight = 5 \n"
"int8 kFourthLeft = 6\n"
"int8 kFourthRight = 7 \n"
"int8 kOther = 8\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/ColorType\n"
"ColorTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/ColorTypeEnum\n"
"int8 kColorWhite = 0    # 白色\n"
"int8 kColorYellow = 1   # 黄色\n"
"int8 kColorOrange = 2   # 橙色\n"
"int8 kColorBlue = 3     # 蓝色\n"
"int8 kColorGreen = 4    # 绿色\n"
"int8 kColorGray = 5     # 灰色\n"
"int8 kColorWhiteYellow = 6  # 左白右黄\n"
"int8 kColorYellowWhite = 7  # 左黄右白\\\n"
"int8 kColorYellowGrayFusion = 8  # 黄灰混合\n"
"int8 kColorUnknown = 9  # \n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/CurveCoeff\n"
"# 曲线方程: y = c0 + c1*x + c2*x^2 + c3*x^3\n"
"float32 longitude_min  # view range start 类型:float 字节数:4 取值范围:(FLT_MIN~FLT_MAX)\n"
"float32 longitude_max  # view range end   类型:float 字节数:4 取值范围:(FLT_MIN~FLT_MAX)\n"
"float64 c0            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c1            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c2            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 c3            # 类型:float64 字节数:8 取值范围:(DOUBLE_MIN~DOUBLE_MAX)\n"
"float64 dev_c0        # c0的标准差，即，车道线横向位置的标准差\n"
"float64 dev_c1		  # c1的标准差，即，车道线航向角的标准差\n"
"float64 dev_c2        # c2的标准差，即，车道线原点处曲率的标准差\n"
"float64 dev_c3       # c3的标准差，即，车道线原点处曲率变化率的标注差\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2fList\n"
"Point2f[] points\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point2f\n"
"float32 x\n"
"float32 y\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point3DList\n"
"geometry_msgs/Point[] points \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineState\n"
"LineStateEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineStateEnum\n"
"int8 kDetected = 0      # 检测线\n"
"int8 kPredicted = 1     # 预测线\n"
"int8 kStableTrack = 2   # 稳定跟踪\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/FreeSpaces\n"
"FreeZone[] freezone                                   # 采样点集 字节数:64*n 最大容量:100\n"
"float32 dist_std                                               # 采样点距离标准差 类型:float 字节数:4 取值范围(0~FLT_MAX)\n"
"float32 angle_std                                              # 采样点角度标准差 类型:float 字节数:4 取值范围(0~FLT_MAX)\n"
"float32 height_std                                             # 采样点高度标准差 类型:float 字节数:4 取值范围(0~FLT_MAX)\n"
"================================================================================\n"
"MSG: mviz_apa_show/FreeZone\n"
"Point2f point_image_coord              # 采样点图像坐标  字节数:16 取值范围(w>=x>=0, h>=y>=0)\n"
"geometry_msgs/Point point_vehicle_coord            # 采样点世界坐标  字节数:24 取值范围(100>=x>=0, 20>=y>=-20)\n"
"float32 dist                                               # 采样点与本车距离 类型:float32 字节数:4 取值范围(0~100) \n"
"float32 angle                                              # 采样点与本车前进方向角度(弧度) 类型:float32 字节数:4 取值范围(-π/2~π/2)\n"
"#LaneIdx lane_index                                      # 采样点所属车道 类型:int32 字节数:4 取值范围(0~7)\n"
"float32 confidence                                         # 置信度 类型:float32 字节数:4 取值范围(0~1)\n"
"#SpaceType type                                           # 采样点邻近不可同行类型 类型:int 字节数:4 取值范围(0~7)\n"
"#MotionProp motion_prop                                   # 采样点运动属性 类型:int 字节数:4 取值范围(0~2)\n"
"uint32 camera_id                                         # 摄像头id\n"
"uint32 sensor_type                                      # (0-camera, 1-radar, 2-LIDAR, 3-Hdmap, 4-LIDAR_CAM_FUSION)\n"
"================================================================================\n"
"MSG: mviz_apa_show/Roadmarks\n"
"Roadmark[] roadmarks\n"
"================================================================================\n"
"MSG: mviz_apa_show/Roadmark\n"
"uint32 id                                                    # id 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"RoadmarkType type                                                    # 类型 类型:int 字节数:4 取值范围:(0~17)\n"
"Point2fList corner_pt_image_coord     # 外接矩形角点图像坐标 字节数:64 取值范围(w>=x>=0, h>=y>=0) 容量:4\n"
"Point3DList corner_pt_vehicle_coord   # 外接矩形角点世界坐标 字节数:96 取值范围(100>=x>=0, 20>=y>=-20) 容量:4\n"
"geometry_msgs/Point centroid_vehicle_coord             # 质心世界坐标 字节数:24 取值范围(100>=x>=0, 20>=y>=-20)\n"
"float32 confidence                                            # 置信度 类型:float32 字节数:4 取值范围:(0~1)\n"
"uint32 lane_idx                                              # 路面标识所在的lane id 类型:uint32 字节数:4 取值范围:(0~7)\n"
"# Form form                                             \n"
"# State state\n"
"Point2f centroid_image_coord\n"
"float32 width                                                # 线型标识世界坐标下的宽度\n"
"uint32 camera_id                                            # 摄像头id\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadmarkType\n"
"RoadmarkTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadmarkTypeEnum\n"
"int8 kBackGround = 0              # 背景\n"
"int8 kStraightArrow = 1           # 直行\n"
"int8 kLeftArrow = 2               # 左转\n"
"int8 kRightArrow = 3              # 右转\n"
"int8 kUturnArrow = 4              # 掉头\n"
"int8 kDiamond = 5                 # 菱形 (前方有人行横道)\n"
"int8 kInvertedTriangle = 6        # 倒三角 (减速让行)\n"
"int8 kOppositemarks = 7           # 对向标识\n"
"int8 kStopLane = 8                # 停止线\n"
"int8 kZebraCrossing = 9           # 斑马线\n"
"int8 kNoParkingArea = 10          # 禁止停车\n"
"int8 kGoreArea = 11               # 分道角区\n"
"int8 kGroundWords = 12            # 地面文字\n"
"int8 kDecelerationLine = 13       # 减速标识\n"
"int8 kSpeedBump = 14              # 减速带\n"
"int8 kManholeCover = 15           # 井盖\n"
"int8 kPole = 16    			      # 路灯杆\n"
"int8 kTypeNums = 17               # 总类型数\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadEdgeList\n"
"RoadEdge[] road_edges\n"
"================================================================================\n"
"MSG: mviz_apa_show/RoadEdge\n"
"uint32 id                                                    # id 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"uint32 age				                                      # 检测帧数 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"CurveCoeff curve_vehicle_coord                               # 车身坐标系下曲线方程 字节数:40\n"
"CurveCoeff curve_image_coord                                 # 图像坐标系下的曲线方程 字节数:40\n"
"Point3DList points_vehicle_coord           # 车身坐标系下的采样点 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"Point2fList points_image_coord             # 图像坐标系下的采样点 字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point2fList fit_points_image_coord         # 图像坐标系下的点集 (拟合抽样) 字节数:16*n 取值范围(w>=x>=0, h>=y>=0) 最大容量:60\n"
"Point3DList fit_points_vehicle_coord       # 车身坐标系下的点集 (拟合抽样) 字节数:24*n 取值范围(100>=x>=0, 20>=y>=-20) 最大容量:60\n"
"LineState state                                              # 线状态 类型:int 字节数:4 取值范围:(0~2)\n"
"int32 side                                                  # 路沿在左侧还是右侧 类型:int32 字节数:4 取值范围(0~1)\n"
"float32 confidence                                            # 置信度 类型:float 字节数:4 取值范围:(0~1)\n"
"uint32[] camera_id                         # 摄像头id \n"
"================================================================================\n"
"MSG: mviz_apa_show/MotionEst\n"
"float32 lateral_speed # 横向速度(单位: m/s) 类型:float32 字节数:4 取值范围:[-10 ~ 10]                    \n"
"float32 lateral_acc   # 横向加速度(单位: m/s^2) 类型:float32 字节数:4 取值范围:[-5g - 5g]\n"
"float32 confidence    # 置信度 类型:float　字节数:4 取值范围:[0 - 1] \n"
"================================================================================\n"
"MSG: mviz_apa_show/PoseEst\n"
"float32 pitch_est                                              # 估计pitch(单位: radian) 类型:float32 字节数:4 取值范围:[-0.175, 0.175]\n"
"Point2f vanish_pt                         # 灭点 字节数：8\n"
"Point2f vanish_cov                        # 灭点协方差 字节数：8\n"
"bool is_valid 												 # 灭点有效标志 字节数：1\n"
"uint32 camera_id                                             # 摄像头id\n"
"float32 dpitch                                                # delta pitch (unit: radian)\n"
"float32 confidence                                            # 置信度\n"
"================================================================================\n"
"MSG: mviz_apa_show/DataSource\n"
"DataSourceEnum source\n"
"================================================================================\n"
"MSG: mviz_apa_show/DataSourceEnum\n"
"int8 kMinieye   = 0\n"
"int8 kEyeQ3     = 1\n"
"int8 kEyeQ4     = 2\n"
"int8 kJ2        = 3\n"
"int8 kLidar     = 4      # 纯激光雷达\n"
"int8 kCamera    = 5      # 纯摄像头\n"
"int8 kCameraLidar = 6    # 摄像头激光雷达融合\n"
"int8 kUltraRadar = 7     # 超声波雷达\n"
"int8 value\n"
"================================================================================\n"
"MSG: mviz_apa_show/JunctionList\n"
"Junction[] junc_list\n"
"================================================================================\n"
"MSG: mviz_apa_show/Junction\n"
"# 道路合流分流点, 总字节数64\n"
"# Type type = 1                    # 类型 字节数:4\n"
"Point2f pt_image_coord     # 图像坐标 字节数:8 \n"
"Point2f pt_vehicle_coord   # 车身坐标 字节数:8 \n"
"uint64[] laneline_id                   # 形成交叉点的车道线id  字节数:32 (最多4个)\n"
"int32 state                                   # 状态 字节数:4 \n"
"float32 confidence                              # 置信度 字节数:4\n"
"int32 pos                                       # 位置  字节数：4 1-> 左边 2-> 右边\n"
"================================================================================\n"
"MSG: mviz_apa_show/EgoMotion\n"
"float32 speed_mps           # m/s\n"
"bool is_imu_valid         # 是否去除bias\n"
"float32 dyaw                # delta yaw, unit: radian\n"
"bool is_dyaw_valid         # dyaw 标志位\n"
"float32 dpitch               # delta pitch, unit : radian\n"
"bool is_dpitch_valid       # dpitch 标志位\n"
"int32 dt_ms                # time lag between two images\n"
"uint64 curr_timestamp      # 当前时戳\n"
"================================================================================\n"
"MSG: mviz_apa_show/CamID\n"
"	# /* 0x1 -> front, 0x2 -> rear, 0x4 -> left, 0x8 -> right\n"
"	#  * 0x1 | 0x4 -> left and front\n"
"	#  * 0x2 | 0x4 -> left and rear\n"
"	#  * 0x1 | 0x8 -> right and front\n"
"	#  * 0x2 | 0x8 -> right and rear\n"
"	#  */\n"
"	int32 cam_direct # 安装位置\n"
"	int8 fov        # fov描述 \n"
"	int32 id        # 扩展字段(可以直接用此字段表示camera个体)\n"
"================================================================================\n"
"MSG: mviz_apa_show/PoleList\n"
"Pole[] poles\n"
"================================================================================\n"
"MSG: mviz_apa_show/Pole\n"
"uint32 id                             # id 类型:uint32 字节数:4 取值范围:(0~2^32)\n"
"Point2fList corner_pt_image_coord     # 关键点图像坐标 字节数:64 取值范围(w>=x>=0, h>=y>=0) 容量:4\n"
"Point3DList corner_pt_vehicle_coord   # 关键点世界坐标 字节数:96 取值范围(100>=x>=0, 20>=y>=-20) 容量:4\n"
"geometry_msgs/Point centroid_vehicle_coord        # 质心世界坐标 字节数:24 取值范围(100>=x>=0, 20>=y>=-20)\n"
"float32 confidence                    # 置信度 类型:float 字节数:4 取值范围:(0~1)\n"
"Point2f centroid_image_coord\n"
"int32 pos                             # 位置 1->左边 2->右边\n"
"uint32 camera_id                      # 摄像头id\n"
;
  }

  static const char* value(const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lane);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadmarkingStamp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::RoadmarkingStamp_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lane: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Roadmarking_<ContainerAllocator> >::stream(s, indent + "  ", v.lane);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_ROADMARKINGSTAMP_H
