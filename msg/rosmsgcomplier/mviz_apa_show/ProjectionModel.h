// Generated by gencpp from file mviz_apa_show/ProjectionModel.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_PROJECTIONMODEL_H
#define MVIZ_APA_SHOW_MESSAGE_PROJECTIONMODEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/ProjectionModelEnum.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct ProjectionModel_
{
  typedef ProjectionModel_<ContainerAllocator> Type;

  ProjectionModel_()
    : type()  {
    }
  ProjectionModel_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mviz_apa_show::ProjectionModelEnum_<ContainerAllocator>  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> const> ConstPtr;

}; // struct ProjectionModel_

typedef ::mviz_apa_show::ProjectionModel_<std::allocator<void> > ProjectionModel;

typedef boost::shared_ptr< ::mviz_apa_show::ProjectionModel > ProjectionModelPtr;
typedef boost::shared_ptr< ::mviz_apa_show::ProjectionModel const> ProjectionModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::ProjectionModel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::ProjectionModel_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ProjectionModel_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::ProjectionModel_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ProjectionModel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbb41c67a1030bf4336d33132e28a933";
  }

  static const char* value(const ::mviz_apa_show::ProjectionModel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbb41c67a1030bf4ULL;
  static const uint64_t static_value2 = 0x336d33132e28a933ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/ProjectionModel";
  }

  static const char* value(const ::mviz_apa_show::ProjectionModel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ProjectionModelEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/ProjectionModelEnum\n"
"int8 PRJ_MODEL_UNKNOWN = 0\n"
"int8 FISHEYE = 1\n"
"int8 MEI = 2\n"
"int8 PIN_HOLE = 3\n"
"int8 ATAN = 4\n"
"int8 DAVIDE_SCARAMUZZA = 5\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::ProjectionModel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProjectionModel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::ProjectionModel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::ProjectionModel_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::mviz_apa_show::ProjectionModelEnum_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_PROJECTIONMODEL_H
