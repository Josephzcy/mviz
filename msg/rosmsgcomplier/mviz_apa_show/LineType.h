// Generated by gencpp from file mviz_apa_show/LineType.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_LINETYPE_H
#define MVIZ_APA_SHOW_MESSAGE_LINETYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/LineTypeEnum.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct LineType_
{
  typedef LineType_<ContainerAllocator> Type;

  LineType_()
    : type()  {
    }
  LineType_(const ContainerAllocator& _alloc)
    : type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mviz_apa_show::LineTypeEnum_<ContainerAllocator>  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::mviz_apa_show::LineType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::LineType_<ContainerAllocator> const> ConstPtr;

}; // struct LineType_

typedef ::mviz_apa_show::LineType_<std::allocator<void> > LineType;

typedef boost::shared_ptr< ::mviz_apa_show::LineType > LineTypePtr;
typedef boost::shared_ptr< ::mviz_apa_show::LineType const> LineTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::LineType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::LineType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::LineType_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LineType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::LineType_<ContainerAllocator1> & lhs, const ::mviz_apa_show::LineType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LineType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::LineType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LineType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::LineType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LineType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::LineType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::LineType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc9e530b2cb8031dc6281b8520fb8c8b";
  }

  static const char* value(const ::mviz_apa_show::LineType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc9e530b2cb8031dULL;
  static const uint64_t static_value2 = 0xc6281b8520fb8c8bULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::LineType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/LineType";
  }

  static const char* value(const ::mviz_apa_show::LineType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::LineType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LineTypeEnum type\n"
"================================================================================\n"
"MSG: mviz_apa_show/LineTypeEnum\n"
"int8 kLineSingleSolid = 0   # 实线\n"
"int8 kLineSingleDashed = 1  # 虚线\n"
"int8 kLineBold = 2          # 短粗虚线（道路出入口标线）\n"
"int8 kLineDoubleSolid = 3   # 双实线\n"
"int8 kLineDoubleDashed = 4  # 双虚线\n"
"int8 kLineSolidDashed = 5   # 实虚线\n"
"int8 kLineDashedSolid = 6   # 虚实线\n"
"int8 kFence = 7             # 栅栏\n"
"int8 kCurb=8                # 路沿\n"
"int8 kLineFishboneSolid = 9  # 减速线-实线\n"
"int8 kLineFishboneDashed = 10  # 减速线-虚线\n"
"int8 kLineChangeable = 11      # 可变车道线\n"
"int8 kLineUnknown = 12\n"
"int8 value\n"
;
  }

  static const char* value(const ::mviz_apa_show::LineType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::LineType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::LineType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::LineType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::mviz_apa_show::LineTypeEnum_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_LINETYPE_H
