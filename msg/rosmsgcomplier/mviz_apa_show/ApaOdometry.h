// Generated by gencpp from file mviz_apa_show/ApaOdometry.msg
// DO NOT EDIT!


#ifndef MVIZ_APA_SHOW_MESSAGE_APAODOMETRY_H
#define MVIZ_APA_SHOW_MESSAGE_APAODOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mviz_apa_show/Pose.h>
#include <mviz_apa_show/PoseList.h>

namespace mviz_apa_show
{
template <class ContainerAllocator>
struct ApaOdometry_
{
  typedef ApaOdometry_<ContainerAllocator> Type;

  ApaOdometry_()
    : timestamp_us(0)
    , frame_id(0)
    , current_pose()
    , history_pose()
    , velocity(0.0)
    , distance(0.0)  {
    }
  ApaOdometry_(const ContainerAllocator& _alloc)
    : timestamp_us(0)
    , frame_id(0)
    , current_pose(_alloc)
    , history_pose(_alloc)
    , velocity(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;

   typedef uint64_t _frame_id_type;
  _frame_id_type frame_id;

   typedef  ::mviz_apa_show::Pose_<ContainerAllocator>  _current_pose_type;
  _current_pose_type current_pose;

   typedef  ::mviz_apa_show::PoseList_<ContainerAllocator>  _history_pose_type;
  _history_pose_type history_pose;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> const> ConstPtr;

}; // struct ApaOdometry_

typedef ::mviz_apa_show::ApaOdometry_<std::allocator<void> > ApaOdometry;

typedef boost::shared_ptr< ::mviz_apa_show::ApaOdometry > ApaOdometryPtr;
typedef boost::shared_ptr< ::mviz_apa_show::ApaOdometry const> ApaOdometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mviz_apa_show::ApaOdometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mviz_apa_show::ApaOdometry_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ApaOdometry_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_us == rhs.timestamp_us &&
    lhs.frame_id == rhs.frame_id &&
    lhs.current_pose == rhs.current_pose &&
    lhs.history_pose == rhs.history_pose &&
    lhs.velocity == rhs.velocity &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mviz_apa_show::ApaOdometry_<ContainerAllocator1> & lhs, const ::mviz_apa_show::ApaOdometry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mviz_apa_show

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbeee1c5260573855927a6a7f61bee70";
  }

  static const char* value(const ::mviz_apa_show::ApaOdometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbeee1c526057385ULL;
  static const uint64_t static_value2 = 0x5927a6a7f61bee70ULL;
};

template<class ContainerAllocator>
struct DataType< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mviz_apa_show/ApaOdometry";
  }

  static const char* value(const ::mviz_apa_show::ApaOdometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp_us         # 时间戳\n"
"uint64 frame_id             # 帧ID\n"
"Pose current_pose           # 当前位姿\n"
"PoseList history_pose       # 历史位姿\n"
"float32 velocity              # 当前速度\n"
"float32 distance              # 当前里程\n"
"================================================================================\n"
"MSG: mviz_apa_show/Pose\n"
"uint64 timestamp_us    # time stamp us\n"
"Point3f pose           #  [x, y, theta] [meter, meter, rad]\n"
"================================================================================\n"
"MSG: mviz_apa_show/Point3f\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: mviz_apa_show/PoseList\n"
"Pose[] pose_list\n"
;
  }

  static const char* value(const ::mviz_apa_show::ApaOdometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_us);
      stream.next(m.frame_id);
      stream.next(m.current_pose);
      stream.next(m.history_pose);
      stream.next(m.velocity);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ApaOdometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mviz_apa_show::ApaOdometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mviz_apa_show::ApaOdometry_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_us: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp_us);
    s << indent << "frame_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "current_pose: ";
    s << std::endl;
    Printer< ::mviz_apa_show::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.current_pose);
    s << indent << "history_pose: ";
    s << std::endl;
    Printer< ::mviz_apa_show::PoseList_<ContainerAllocator> >::stream(s, indent + "  ", v.history_pose);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVIZ_APA_SHOW_MESSAGE_APAODOMETRY_H
